(self.webpackChunkyagpdb_cc_website=self.webpackChunkyagpdb_cc_website||[]).push([[6163],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(n),p=r,b=u["".concat(c,".").concat(p)]||u[p]||m[p]||i;return n?a.createElement(b,o(o({ref:t},l),{},{components:n})):a.createElement(b,o({ref:t},l))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7122:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return l}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o={sidebar_position:16,title:"Starboard V1"},s={unversionedId:"funccs/starboardv1",id:"funccs/starboardv1",isDocsHomePage:!1,title:"Starboard V1",description:"This command allows users to react to messages with stars. If it reaches a given amount, it will be sent in a given channel.",source:"@site/docs/funccs/starboardv1.md",sourceDirName:"funccs",slug:"/funccs/starboardv1",permalink:"/yagpdb-cc/funccs/starboardv1",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/yagpdb-cc-website/docs/funccs/starboardv1.md",version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16,title:"Starboard V1"},sidebar:"tutorialSidebar",previous:{title:"Slot Machine",permalink:"/yagpdb-cc/funccs/slotmachine"},next:{title:"Text to Emoji",permalink:"/yagpdb-cc/funccs/tte"}},c=[],d={toc:c};function l(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This command allows users to react to messages with stars. If it reaches a given amount, it will be sent in a given channel.",(0,i.kt)("br",{parentName:"p"}),"\n","Benefits over star command provided in docs: Updates star count with more stars using a single DB text entry.",(0,i.kt)("br",{parentName:"p"}),"\n",'Posts automatically removed when they fall below star threshold. Ability to use "anti-star" reactions similar to an upvote/downvote system to automatically remove posts unfit for starboard.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Trigger Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Reaction")," with option ",(0,i.kt)("inlineCode",{parentName:"p"},"Added + Removed reactions")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'{{/*\n    This command allows users to react to messages with stars. If it reaches a given amount, it will be sent in a given channel.\n    Benefits over star command provided in docs: Updates star count with more stars using a single DB text entry.\n    Posts automatically removed when they fall below star threshold. Ability to use "anti-star" reactions similar to an\n    upvote/downvote system to automatically remove posts unfit for starboard. \n    \n    Recommended trigger: Reaction trigger with option `Added + Removed reactions`.\n*/}}\n\n{{/* CONFIGURATION VALUES START */}}\n{{ $starEmoji := "\u2b50" }} {{/* Star emoji name */}}\n{{ $starLimit := 4 }} {{/* Reactions needed for message to be put on starboard */}}\n{{ $starboard := 678379546218594304 }} {{/* ID of starboard channel */}}\n{{ $maxAge := "2w" }} {{/*maximum age of message for stars to be counted. structure (mo)nth, (w)eek, (d)ay, (h)our. ex: 3d = 3days, 1mo = 1 month.*/}}\n\n{{ $antiStarEnable := false}} {{/*enable/disable anti-star counting. enable = true, disable = false*/}}\n{{ $antiStarEmoji := "\u274c" }} {{/*anti-star emoji name*/}}\n{{ $antiStarExtra := 3}} {{/*number of additional anti-star reactions needed before removing post. At zero the post will remove when it has the same number of anti-stars as stars./}}\n{{/* CONFIGURATION VALUES END */}}\n\n{{ $linkRegex := `https?:\\/\\/(?:\\w+\\.)?[\\w-]+\\.[\\w]{2,3}(?:\\/[\\w-_.]+)+\\.(?:png|jpg|jpeg|gif|webp)` }}\n\n{{ $count := 0 }} {{ $antiCount := 0 }}\n{{ range .ReactionMessage.Reactions }}\n    {{- if and (eq .Emoji.Name $starEmoji) (ge .Count $starLimit) }}\n        {{- $count = .Count }}\n    {{- end -}}\n    {{- if and $antiStarEnable (eq .Emoji.Name $antiStarEmoji) (ge .Count $starLimit) }}\n        {{- $antiCount = .Count }}\n    {{- end -}}\n{{ end }}\n\n{{ $starboardMessage := 0 }}\n{{ $thisID := .ReactionMessage.ID }}\n{{ with (dbGet 0 "starboardMessages").Value }}\n    {{ $idRegex := printf `%d:(\\d+)` $thisID }}\n    {{ with reFindAllSubmatches $idRegex . }} {{ $starboardMessage = index . 0 1 }} {{ end }}\n    {{ if not (getMessage $starboard $starboardMessage) }}\n        {{ $starboardMessage = 0 }}\n        {{ dbSet 0 "starboardMessages" (reReplace $idRegex . "") }}\n    {{ end }}\n{{ end }}\n\n{{if not $antiStarEnable}} {{$antiStarExtra = 0}} {{end}} {{/*if disabled reset count to zero to prevent user configured variable from interrupting desired functionality*/}}\n\n{{ if or (lt $count $starLimit) (ge (add $antiCount $antiStarExtra) $count) }}\n{{ with (dbGet 0 "starboardMessages").Value }}\n    {{ $idRegex := printf `\\n%d:(\\d+)` $thisID }}\n    {{ with reFindAllSubmatches $idRegex . }} {{ $starboardMessage = index . 0 1 }} {{ end }}\n        {{ deleteMessage $starboard $starboardMessage 0 }}\n        {{ dbSet 0 "starboardMessages" (reReplace $idRegex . "") }}\n    {{ end }}\n{{ else if and $count (or .ReactionMessage.Content .ReactionMessage.Attachments) (or (eq .Reaction.Emoji.Name $starEmoji) (eq .Reaction.Emoji.Name $antiStarEmoji))(le (currentTime.Sub .Message.Timestamp.Parse) (toDuration $maxAge))}}\n    {{ $emoji := "\ud83c\udf20" }}\n    {{ if lt $count 5 }} {{ $emoji = "\u2b50" }}\n    {{ else if lt $count 10 }} {{ $emoji = "\ud83c\udf1f" }}\n    {{ else if lt $count 15 }} {{ $emoji = "\u2728" }}\n    {{ else if lt $count 20 }} {{ $emoji = "\ud83d\udcab" }}\n    {{ else if lt $count 30 }} {{ $emoji = "\ud83c\udf87" }}\n    {{ else if lt $count 40 }} {{ $emoji = "\ud83c\udf86" }}\n    {{ else if lt $count 50 }} {{ $emoji = "\u2604\ufe0f" }}\n    {{ end }}\n    {{ $embed := sdict\n        "color" 0xFFAC33\n        "fields" (cslice\n            (sdict "name" "Author" "value" .ReactionMessage.Author.Mention "inline" true)\n            (sdict "name" "Channel" "value" (printf "<#%d>" .Channel.ID) "inline" true)\n        )\n        "timestamp" .ReactionMessage.Timestamp\n        "thumbnail" (sdict "url" (.ReactionMessage.Author.AvatarURL "1024"))\n        "footer" (sdict "text" (printf "%s %d | %d" $emoji $count .ReactionMessage.ID))\n    }}\n    {{ with .ReactionMessage.Content }}\n        {{ with reFind $linkRegex . }} {{ $embed.Set "image" (sdict "url" .) }} {{ end }}\n        {{ $content := . }}\n        {{ if gt (len .) 1000 }} {{ $content = slice . 0 1000 | printf "%s..." }} {{ end }}\n        {{ $embed.Set "fields" ($embed.fields.Append (sdict "name" "Message" "value" $content)) }}\n    {{ end }}\n    {{ with .ReactionMessage.Attachments }}\n        {{ $attachment := (index . 0).URL }}\n        {{ if reFind `\\.(png|jpg|jpeg|gif|webp)$` $attachment }}\n            {{ $embed.Set "image" (sdict "url" $attachment) }}\n        {{ end }}\n    {{ end }}\n    {{ $embed.Set "fields" ($embed.fields.Append (sdict\n        "name" "Message"\n        "value" (printf "[Jump To](https://discordapp.com/channels/%d/%d/%d)" .Guild.ID .Channel.ID .ReactionMessage.ID)))\n    }}\n    {{ with $starboardMessage }}\n        {{ editMessage $starboard . (cembed $embed) }}\n    {{ else }}\n        {{ $ret := sendMessageRetID $starboard (cembed $embed) }}\n        {{ dbSet 0 "starboardMessages" (printf\n            "%s\\n%d:%d"\n            (or (dbGet 0 "starboardMessages").Value "")\n            .ReactionMessage.ID $ret\n        ) }}\n    {{ end }}\n{{ end }}\n')))}l.isMDXComponent=!0}}]);