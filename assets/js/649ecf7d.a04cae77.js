"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8991],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,f=m["".concat(l,".").concat(c)]||m[c]||p[c]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5900:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return d}});var a=n(3117),r=(n(7294),n(3905));const i={title:"Starboard V1"},o=void 0,s={unversionedId:"fun/starboardv1",id:"fun/starboardv1",title:"Starboard V1",description:"There is a newer version of the starboard system that has all of the features of this one. We recommend that you consider switching to it / using it over this one if possible.",source:"@site/docs/fun/starboardv1.md",sourceDirName:"fun",slug:"/fun/starboardv1",permalink:"/fun/starboardv1",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/fun/starboardv1.md",tags:[],version:"current",frontMatter:{title:"Starboard V1"},sidebar:"sidebar",previous:{title:"Slot Machine",permalink:"/fun/slot-machine"},next:{title:"Text to Emoji Convertor",permalink:"/fun/tte"}},l={},d=[{value:"Trigger",id:"trigger",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],u={toc:d},m="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"There is a ",(0,r.kt)("a",{parentName:"p",href:"starboard/overview"},"newer version")," of the starboard system that has all of the features of this one. We recommend that you consider switching to it / using it over this one if possible.")),(0,r.kt)("p",null,"This command allows users to react to messages with stars. If it reaches a given amount, it will be sent in the starboard channel."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Benefits over the starboard command provided in the documentation:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Updates star count with more stars using a single database text entry."),(0,r.kt)("li",{parentName:"ul"},"Posts automatically removed when they fall below star threshold."),(0,r.kt)("li",{parentName:"ul"},'Ability to use "anti-star" reactions similar to an upvote/downvote system to automatically remove posts unfit for starboard.')),(0,r.kt)("h2",{id:"trigger"},"Trigger"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Reaction"),(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Additional options:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Added + Removed Reactions")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$starEmoji"),(0,r.kt)("br",null),"\nName of the star emoji.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$starLimit"),(0,r.kt)("br",null),"\nThreshold of stars needed for a message to be posted on the starboard.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud83d\udccc ",(0,r.kt)("inlineCode",{parentName:"p"},"$starboard"),(0,r.kt)("br",null),"\nChannel ID of the starboard channel.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$maxAge"),(0,r.kt)("br",null),"\nMaximum age of messages for stars to be considered for the starboard. Structure is ",(0,r.kt)("inlineCode",{parentName:"p"},"(mo)nth"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"(w)week"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"(d)ay"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"(h)our"),".\n",(0,r.kt)("strong",{parentName:"p"},"Example:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"3d")," => 3 days, ",(0,r.kt)("inlineCode",{parentName:"p"},"1mo")," => 1 month.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$antiStarEnable"),(0,r.kt)("br",null),"\nWhether ",(0,r.kt)("em",{parentName:"p"},"anti-star")," counting should be enabled. Anti-stars count towards the total number of stars but in a negative manner instead. For example, if a message had 3 stars and 1 anti-star, the adjusted number of stars would be 2.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$antiStarEmoji"),(0,r.kt)("br",null),"\nThe name of the anti-star emoji.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$antiStarExtra"),(0,r.kt)("br",null),"\nThe number of additional anti-star reactions needed before removing a post. For example, if this value were ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," (the default), the post would be removed if it had the same number of anti-star reactions as stars."))),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/fun/starboard.go.tmpl",file:"../../../src/fun/starboard.go.tmpl"},'{{/*\n    Allows users to react to messages with stars. If the number of reactions hits a given amount, the message is re-sent in the starboard channel.\n    See <https://yagpdb-cc.github.io/fun/starboardv1> for more information.\n\n    Author: dvoraknt <https://github.com/dvoraknt>\n*/}}\n\n{{/* Configurable values */}}\n{{ $starEmoji := "\u2b50" }}\n{{ $starLimit := 4 }}\n{{ $starboard := 678379546218594304 }}\n{{ $maxAge := "2w" }}\n\n{{ $antiStarEnable := false}}\n{{ $antiStarEmoji := "\u274c" }}\n{{ $antiStarExtra := 3}}\n{{/* End of configurable values */}}\n\n{{ $linkRegex := `https?:\\/\\/(?:\\w+\\.)?[\\w-]+\\.[\\w]{2,3}(?:\\/[\\w-_.]+)+\\.(?:png|jpg|jpeg|gif|webp)` }}\n\n{{ $count := 0 }} {{ $antiCount := 0 }}\n{{ range .ReactionMessage.Reactions }}\n    {{- if and (eq .Emoji.Name $starEmoji) (ge .Count $starLimit) }}\n        {{- $count = .Count }}\n    {{- end -}}\n    {{- if and $antiStarEnable (eq .Emoji.Name $antiStarEmoji) (ge .Count $starLimit) }}\n        {{- $antiCount = .Count }}\n    {{- end -}}\n{{ end }}\n\n{{ $starboardMessage := 0 }}\n{{ $thisID := .ReactionMessage.ID }}\n{{ with (dbGet 0 "starboardMessages").Value }}\n    {{ $idRegex := printf `%d:(\\d+)` $thisID }}\n    {{ with reFindAllSubmatches $idRegex . }} {{ $starboardMessage = index . 0 1 }} {{ end }}\n    {{ if not (getMessage $starboard $starboardMessage) }}\n        {{ $starboardMessage = 0 }}\n        {{ dbSet 0 "starboardMessages" (reReplace $idRegex . "") }}\n    {{ end }}\n{{ end }}\n\n{{if not $antiStarEnable}} {{$antiStarExtra = 0}} {{end}} {{/*if disabled reset count to zero to prevent user configured variable from interrupting desired functionality*/}}\n\n{{ if or (lt $count $starLimit) (ge (add $antiCount $antiStarExtra) $count) }}\n{{ with (dbGet 0 "starboardMessages").Value }}\n    {{ $idRegex := printf `\\n%d:(\\d+)` $thisID }}\n    {{ with reFindAllSubmatches $idRegex . }} {{ $starboardMessage = index . 0 1 }} {{ end }}\n        {{ deleteMessage $starboard $starboardMessage 0 }}\n        {{ dbSet 0 "starboardMessages" (reReplace $idRegex . "") }}\n    {{ end }}\n{{ else if and $count (or .ReactionMessage.Content .ReactionMessage.Attachments) (or (eq .Reaction.Emoji.Name $starEmoji) (eq .Reaction.Emoji.Name $antiStarEmoji)) (le (currentTime.Sub .Message.Timestamp.Parse) (toDuration $maxAge))}}\n    {{ $emoji := "\ud83c\udf20" }}\n    {{ if lt $count 5 }} {{ $emoji = "\u2b50" }}\n    {{ else if lt $count 10 }} {{ $emoji = "\ud83c\udf1f" }}\n    {{ else if lt $count 15 }} {{ $emoji = "\u2728" }}\n    {{ else if lt $count 20 }} {{ $emoji = "\ud83d\udcab" }}\n    {{ else if lt $count 30 }} {{ $emoji = "\ud83c\udf87" }}\n    {{ else if lt $count 40 }} {{ $emoji = "\ud83c\udf86" }}\n    {{ else if lt $count 50 }} {{ $emoji = "\u2604\ufe0f" }}\n    {{ end }}\n    {{ $embed := sdict\n        "color" 0xFFAC33\n        "fields" (cslice\n            (sdict "name" "Author" "value" .ReactionMessage.Author.Mention "inline" true)\n            (sdict "name" "Channel" "value" (printf "<#%d>" .Channel.ID) "inline" true)\n        )\n        "timestamp" .ReactionMessage.Timestamp\n        "thumbnail" (sdict "url" (.ReactionMessage.Author.AvatarURL "1024"))\n        "footer" (sdict "text" (printf "%s %d | %d" $emoji $count .ReactionMessage.ID))\n    }}\n    {{ with .ReactionMessage.Content }}\n        {{ with reFind $linkRegex . }} {{ $embed.Set "image" (sdict "url" .) }} {{ end }}\n        {{ $content := . }}\n        {{ if gt (len .) 1000 }} {{ $content = slice . 0 1000 | printf "%s..." }} {{ end }}\n        {{ $embed.Set "fields" ($embed.fields.Append (sdict "name" "Message" "value" $content)) }}\n    {{ end }}\n    {{ with .ReactionMessage.Attachments }}\n        {{ $attachment := (index . 0).URL }}\n        {{ if reFind `\\.(png|jpg|jpeg|gif|webp)$` $attachment }}\n            {{ $embed.Set "image" (sdict "url" $attachment) }}\n        {{ end }}\n    {{ end }}\n    {{ $embed.Set "fields" ($embed.fields.Append (sdict\n        "name" "Message"\n        "value" (printf "[Jump To](https://discordapp.com/channels/%d/%d/%d)" .Guild.ID .Channel.ID .ReactionMessage.ID)))\n    }}\n    {{ with $starboardMessage }}\n        {{ editMessage $starboard . (cembed $embed) }}\n    {{ else }}\n        {{ $ret := sendMessageRetID $starboard (cembed $embed) }}\n        {{ dbSet 0 "starboardMessages" (printf\n            "%s\\n%d:%d"\n            (or (dbGet 0 "starboardMessages").Value "")\n            .ReactionMessage.ID $ret\n        ) }}\n    {{ end }}\n{{ end }}\n')),(0,r.kt)("h2",{id:"author"},"Author"),(0,r.kt)("p",null,"This custom command was written by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jo3-l"},"@jo3-l")," with contributions from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dvoraknt"},"@dvoraknt"),"."))}p.isMDXComponent=!0}}]);