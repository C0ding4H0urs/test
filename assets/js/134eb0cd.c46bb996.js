"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9416],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2779:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var r=n(3117),o=(n(7294),n(3905));const i={title:"Selection Sort"},a=void 0,s={unversionedId:"code-snippets/selection-sort",id:"code-snippets/selection-sort",title:"Selection Sort",description:"Code snippet for sorting an array/slice of comparable values of the same type in-place, using the selection sort algorithm.",source:"@site/docs/code-snippets/selection-sort.md",sourceDirName:"code-snippets",slug:"/code-snippets/selection-sort",permalink:"/code-snippets/selection-sort",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/code-snippets/selection-sort.md",tags:[],version:"current",frontMatter:{title:"Selection Sort"},sidebar:"sidebar",previous:{title:"Parse Text",permalink:"/code-snippets/parse-text"},next:{title:"Snowflake to Time",permalink:"/code-snippets/snowflake2time"}},l={},c=[{value:"Code",id:"code",level:2},{value:"Usage",id:"usage",level:2},{value:"Sorting in ascending order",id:"sorting-in-ascending-order",level:3},{value:"Author",id:"author",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Code snippet for sorting an array/slice of comparable values of the same type in-place, using the ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Selection_sort"},"selection sort")," algorithm."),(0,o.kt)("p",null,"Licensed under the terms of the Unlicense."),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},'Though this works fine for small slices/array, due to the inefficient nature of selection sort, running it on "large" slices/arrays (over 200-300 elements) will result in a runtime error. If you want to use this snippet, be careful and constrain your input sizes.')),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/code_snippets/selection_sort.go.tmpl",file:"../../../src/code_snippets/selection_sort.go.tmpl"},"{{/*\n    Sorts an array/slice of numbers descending or ascending in place.\n    See <https://yagpdb-cc.github.io/code-snippets/selection-sort> for more information.\n\n    Licensed under the terms of the Unlicense.\n    Author: jo3-l <https://github.com/jo3-l>\n*/}}\n\n{{/* Let $arr be the array/slice to sort. */}}\n{{ $arr := cslice 1 38 -1 83 -4 5 1 0 }}\n\n{{ $len := len $arr }}\n{{ range seq 0 $len }}\n    {{- $min := . }}\n    {{- range seq (add . 1) $len }}\n        {{- if lt (index $arr $min) (index $arr .) }} {{- $min = . }} {{- end -}}\n    {{- end }}\n    {{- if ne $min . }}\n        {{- $ := index $arr . }}\n        {{- $arr.Set . (index $arr $min) }}\n        {{- $arr.Set $min $ }}\n    {{- end -}}\n{{ end }}\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"First, add the code snippet above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gotmpl"},"{{/* code snippet goes here */}}\n")),(0,o.kt)("p",null,"Next, change the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"$arr")," to the value you want to sort:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:"{3}","{3}":!0},"{{/* Let $arr be the array/slice to sort. */}}\n- {{ $arr := cslice 1 38 -1 83 -4 5 1 0 }}\n+ {{ $arr := theSliceIWantToSort }}\n{{/* rest of code snippet goes here */}}\n")),(0,o.kt)("p",null,"Voila, ",(0,o.kt)("inlineCode",{parentName:"p"},"$arr")," is now sorted! You can check that it was by outputting ",(0,o.kt)("inlineCode",{parentName:"p"},"$arr"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"{2}","{2}":!0},"{{/* code snippet goes here */}}\n`$arr` after sorting: `{{json $arr}}`\n")),(0,o.kt)("h3",{id:"sorting-in-ascending-order"},"Sorting in ascending order"),(0,o.kt)("p",null,"You may have noticed that the above snippet sorts the array in descending order by default - larger numbers come first. That may not be desirable for your use case; perhaps you want smaller numbers to come first. In that case, you just have to change ",(0,o.kt)("inlineCode",{parentName:"p"},"lt")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"gt")," in the following part of the code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:"{4}","{4}":!0},"{{/* rest of code snippet */}}\n{{- range seq (add . 1) $len }}\n-   {{- if lt (index $arr $min) (index $arr .) }} {{- $min = . }} {{- end -}}\n+   {{- if gt (index $arr $min) (index $arr .) }} {{- $min = . }} {{- end -}}\n{{- end }}\n{{/* rest of code snippet */}}\n")),(0,o.kt)("h2",{id:"author"},"Author"),(0,o.kt)("p",null,"This code snippet was written by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jo3-l"},"@jo3-l"),"."))}d.isMDXComponent=!0}}]);