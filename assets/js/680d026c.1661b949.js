"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[114],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return g}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,g=p["".concat(l,".").concat(d)]||p[d]||c[d]||s;return n?r.createElement(g,o(o({ref:t},m),{},{components:n})):r.createElement(g,o({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:i,o[1]=a;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4432:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return s},metadata:function(){return a},toc:function(){return u}});var r=n(3117),i=(n(7294),n(3905));const s={title:"Snipe Message"},o=void 0,a={unversionedId:"utilities/snipe-message",id:"utilities/snipe-message",title:"Snipe Message",description:"Retrieves the most recently deleted message in the past hour (non-premium) / 12 hours (premium).",source:"@site/docs/utilities/snipe-message.md",sourceDirName:"utilities",slug:"/utilities/snipe-message",permalink:"/utilities/snipe-message",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/utilities/snipe-message.md",tags:[],version:"current",frontMatter:{title:"Snipe Message"},sidebar:"sidebar",previous:{title:"Send Message",permalink:"/utilities/send-message"},next:{title:"View Time",permalink:"/utilities/view-time"}},l={},u=[{value:"Trigger",id:"trigger",level:2},{value:"Usage",id:"usage",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],m={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Retrieves the most recently deleted message in the past hour (non-premium) / 12 hours (premium)."),(0,i.kt)("h2",{id:"trigger"},"Trigger"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Command"),(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"snipe")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-snipe")," - Retrieves the most recently deleted message in the past hour (non-premium) / 12 hours (premium).")),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/utilities/snipe.go.tmpl",file:"../../../src/utilities/snipe.go.tmpl"},'{{/* \n    Retrieves the most recent deleted message in the past hour (non-premium) / 12 hours (premium).\n    See <https://yagpdb-cc.github.io/utilities/snipe-message> for more information.\n\n    Author: zen | \u30bc\u30f3#0008 <https://github.com/z3nn13/>\n*/}}\n\n{{/* Global Variables */}}\n{{ $ex := or (and (reFind "a_" .Guild.Icon) "gif" ) "png" }}\n{{ $icon := print "https://cdn.discordapp.com/icons/" .Guild.ID "/" .Guild.Icon "." $ex "?size=1024" }}\n{{ $regex := `\\n\\n\\x60(\\d{1,2}) (\\w{5,7}) ago \\((?:.{24})\\)\\x60 \\*{2}(?:[^#]*)\\*{2}\\#\\d{4} \\(ID (\\d{17,19})\\)\\: ` }}\n{{ $imgRegex := `(?i)https?:(?:\\/\\/(?:[^\\/?#]*))?(?:[^?\\n#\\s]*?\\/[^?\\n#\\s]+\\.(?:jpg|jpeg|png|gif|tif|webp))(?:\\?(?:[^?\\n#\\s]*))?(?:#(.*))?`}}\n{{ $undelete := execAdmin "ud -a" }}\n\n{{ with reFindAllSubmatches $regex $undelete }}\n        {{ $time := printf "%s%s" (index . 0 1) (index . 0 2) | toDuration }}\n        {{ $member := (index . 0 3 | toInt64 | getMember) }}\n        {{ $message := index (reSplit $regex $undelete 3) 1 }}\n\n        {{ $file := "" }}{{ $image_url := "" }}\n        {{ if $image_url = reFind $imgRegex  $message }}\n                {{ $split := reSplit $imgRegex $message 2 }}\n                {{ $message = print "> \u26a0\ufe0f An image link is detected\\n" (joinStr "" $split) }}\n        {{ end }}\n        {{ if gt (toRune $message|len) 2000 }}{{/* Preventing 2k limit error */}}\n                {{ $file = $message }}\n                {{ $message = "*Message exceeded 2k limit. Contents sent as file instead*"}}\n        {{ else if not $message }}\n                {{ $message = "> \u26a0\ufe0f An attachment/embed was deleted" }} \n        {{ end }}\n\n        {{ $col := 0 }}{{ $p := 0 }}{{ $r := $member.Roles }}\n        {{ range $.Guild.Roles}}{{if and (in $r .ID) (.Color) (lt $p .Position)}}{{$p = .Position}}{{$col = .Color}}{{end}}{{end }}\n\n        {{ $embed := cembed "author" (sdict "name" (print $member.User.String " (ID " $member.User.ID ")") "icon_url" ($member.User.AvatarURL "256"))\n            "description" $message \n            "color" $col \n            "image" (sdict "url" $image_url)\n            "footer" (sdict "text" (printf "%s %s ago" (index . 0 1) (index . 0 2)) "icon_url" $icon) \n            "timestamp" (currentTime.Add (mult $time -1|toDuration)) }}\n\n        {{ with $file }}\n            {{ sendMessage nil (complexMessage "file" . "embed" $embed) }}\n        {{ else }}\n            {{ sendMessage nil $embed }}\n        {{ end }}\n{{ else }}\n        {{ sendMessage nil "Nothing to snipe here" }}\n{{ end }}\n')),(0,i.kt)("h2",{id:"author"},"Author"),(0,i.kt)("p",null,"This custom command was written by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/z3nn13"},"zen | \u30bc\u30f3"),"."))}c.isMDXComponent=!0}}]);