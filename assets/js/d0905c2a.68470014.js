"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9442],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return g}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=d(t),p=r,g=c["".concat(s,".").concat(p)]||c[p]||u[p]||i;return t?a.createElement(g,o(o({ref:n},m),{},{components:t})):a.createElement(g,o({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4517:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var a=t(3117),r=(t(7294),t(3905));const i={title:"Deathmatch Game"},o=void 0,l={unversionedId:"fun/deathmatch",id:"fun/deathmatch",title:"Deathmatch Game",description:"This command is a replica of the deathmatch command from Yggdrasil.",source:"@site/docs/fun/deathmatch.md",sourceDirName:"fun",slug:"/fun/deathmatch",permalink:"/fun/deathmatch",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/fun/deathmatch.md",tags:[],version:"current",frontMatter:{title:"Deathmatch Game"},sidebar:"sidebar",previous:{title:"Counting System",permalink:"/fun/counting"},next:{title:"Duck Image Generator",permalink:"/fun/duck"}},s={},d=[{value:"Trigger",id:"trigger",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],m={toc:d},c="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This command is a replica of the deathmatch command from Yggdrasil."),(0,r.kt)("h2",{id:"trigger"},"Trigger"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Command"),(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"deathmatch")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-deathmatch")," - Play against the default opponent (YAGPDB, unless you changed it in the options)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-deathmatch <user>")," - Play against the user provided."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-deathmatch <user0> <user1>")," - Make the first user play against the second user.")),(0,r.kt)("admonition",{title:"Restrictions",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To prevent this command from overloading YAGPDB, no more than 5 deathmatch games can be played in a server at any time.")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$Emojis"),(0,r.kt)("br",null),"\nA pair of emojis to use for the deathmatch messages. The default values will work fine if you aren't selfhosting.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$YAG"),(0,r.kt)("br",null),"\nThe default opponent.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud83d\udccc ",(0,r.kt)("inlineCode",{parentName:"p"},"$Channels"),(0,r.kt)("br",null),"\nA list of channel IDs to use when executing the command loop, to reduce lag. These can be any channels in your server."))),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/fun/deathmatch.go.tmpl",file:"../../../src/fun/deathmatch.go.tmpl"},'{{/*\n    A replica of the deathmatch command from Yggdrasil.\n    See <https://yagpdb-cc.github.io/fun/deathmatch> for more information.\n\n    Author: jo3-l <https://github.com/jo3-l>\n*/}}\n\n{{/* Configurable values */}}\n{{$Emojis := cslice "<:battleForward:681735565594460181>" "<:battleBackwards:681735538105253901>"}}\n{{$YAG := userArg 204255221017214977}}\n\n{{/* Slice of channel IDs to use when executing the command. These can be chosen randomly. */}}\n{{$Channels := cslice 123 234 345}}\n\n{{/* CONFIGURATION VALUES END */}}\n\n{{define "renderEmbed"}}\n    {{$player0 := index .GameData.Players 0}}\n    {{$player1 := index .GameData.Players 1}}\n    {{.Set "Out" (sdict\n        "title" "\ud83d\udca2 Deathmatch"\n        "description" (joinStr "\\n" .GameData.Msgs.StringSlice)\n        "color" 14232643\n        "fields" (cslice\n            (sdict "name" $player0.User.Username "value" (print $player0.HP "/100 HP") "inline" true)\n            (sdict "name" $player1.User.Username "value" (print $player1.HP "/100 HP") "inline" true)\n        )\n    )}}\n{{end}}\n\n{{if not .ExecData}}\n    {{$games := or (dbGet 0 "deathmatch_games").Value 0 | toInt}}\n    {{if gt $games 5}}\n        To prevent overloading YAGPDB, no more than 5 deathmatch games can be played in a server at any time.\n    {{else}}\n        {{$s := dbIncr 0 "deathmatch_games" 1}}\n        {{$args := parseArgs 0 "**Syntax:** `-deathmatch [player1] [player2]`"\n            (carg "member" "player-one")\n            (carg "member" "player-two")\n        }}\n        {{$players := cslice\n            (sdict "User" $YAG "HP" 100)\n            (sdict "User" .User "HP" 100)\n        }}\n        {{with $args.Get 0}} {{$players.Set 0 (sdict "User" .User "HP" 100)}} {{end}}\n        {{with $args.Get 1}} {{$players.Set 1 (sdict "User" .User "HP" 100)}} {{end}}\n\n        {{$gameData := dict\n            "Players" $players\n            "Round" 0\n            "Msgs" (cslice)\n            "ChannelID" .Channel.ID\n        }}\n\n        {{template "renderEmbed" ($query := dict "GameData" $gameData)}}\n        {{$embed := $query.Out}}\n        {{$embed.Set "description" "_Match starting in 3..._"}}\n\n        {{$id := sendMessageRetID nil (cembed $embed)}}\n        {{$gameData.Set "MsgID" $id}}\n\n        {{$c := index $Channels (randInt (len $Channels))}}\n        {{execCC .CCID $c 2 $gameData}}\n    {{end}}\n{{else}}\n    {{$gameData := .ExecData}}\n    {{$idx := mod $gameData.Round 2 | toInt}}\n\n    {{$attacker := index $gameData.Players $idx}}\n    {{$defender := index $gameData.Players (sub 1 $idx)}}\n\n    {{/* compute damage */}}\n    {{$p := randInt 100}}\n    {{$dmg := 0}}\n    {{if lt $p 5}} {{$dmg = randInt 40 50}}\n    {{else if lt $p 15}} {{$dmg = randInt 30 40}}\n    {{else if lt $p 45}} {{$dmg = randInt 20 30}}\n    {{else}} {{$dmg = randInt 1 20}}\n    {{end}}\n\n    {{/* clamp $dmg to defender\'s health so we don\'t get negative HP */}}\n    {{if gt $dmg $defender.HP}} {{$dmg = $defender.HP}} {{end}}\n    {{$defender.Set "HP" (sub $defender.HP $dmg)}}\n\n    {{$m := printf "%s **%s** attacked **%s**, dealing __%d__ damage!"\n        (index $Emojis $idx)\n        $attacker.User.Username\n        $defender.User.Username\n        $dmg\n    }}\n    {{$gameData.Set "Msgs" ($gameData.Msgs.Append $m)}}\n\n    {{if eq $defender.HP 0}}\n        {{$wm := print "\ud83c\udfc6 **" $attacker.User.Username "** has won!"}}\n        {{$gameData.Set "Msgs" ($gameData.Msgs.Append $wm)}}\n        {{$s := dbIncr 0 "deathmatch_games" -1}}\n    {{else}}\n        {{$gameData.Set "Round" (add $gameData.Round 1)}}\n        {{$c := index $Channels (randInt (len $Channels))}}\n        {{execCC .CCID $c 2 $gameData}}\n    {{end}}\n\n    {{/* update embed */}}\n    {{template "renderEmbed" ($query := dict "GameData" $gameData)}}\n    {{editMessage $gameData.ChannelID $gameData.MsgID (cembed $query.Out)}}\n{{end}}\n')),(0,r.kt)("h2",{id:"author"},"Author"),(0,r.kt)("p",null,"This custom command was written by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jo3-l"},"@jo3-l"),"."))}u.isMDXComponent=!0}}]);