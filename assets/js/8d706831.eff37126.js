(self.webpackChunkyagpdb_cc_website=self.webpackChunkyagpdb_cc_website||[]).push([[4735],{3905:function(e,n,a){"use strict";a.d(n,{Zo:function(){return l},kt:function(){return g}});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function d(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=t.createContext({}),o=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},l=function(e){var n=o(e.components);return t.createElement(c.Provider,{value:n},e.children)},$={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=o(a),g=i,m=p["".concat(c,".").concat(g)]||p[g]||$[g]||r;return a?t.createElement(m,s(s({ref:n},l),{},{components:a})):t.createElement(m,s({ref:n},l))}));function g(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=p;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:i,s[1]=d;for(var o=2;o<r;o++)s[o]=a[o];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},7919:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return l}});var t=a(2122),i=a(9756),r=(a(7294),a(3905)),s={sidebar_position:2,title:"Basic Giveaway V2"},d={unversionedId:"giveaway/basic_v2/basicv2giveaway",id:"giveaway/basic_v2/basicv2giveaway",isDocsHomePage:!1,title:"Basic Giveaway V2",description:"Main Giveaway V2 CC. Supports intuitive usage via execCC.",source:"@site/docs/giveaway/basic_v2/basicv2giveaway.md",sourceDirName:"giveaway/basic_v2",slug:"/giveaway/basic_v2/basicv2giveaway",permalink:"/yagpdb-cc/giveaway/basic_v2/basicv2giveaway",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/yagpdb-cc-website/docs/giveaway/basic_v2/basicv2giveaway.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Basic Giveaway V2"},sidebar:"tutorialSidebar",previous:{title:"Giveaway Package (Basic Version 2)",permalink:"/yagpdb-cc/giveaway/basic_v2/basicv2README"},next:{title:"Reaction Listener (Basic V2)",permalink:"/yagpdb-cc/giveaway/basic_v2/v2reactionlistener"}},c=[],o={toc:c};function l(e){var n=e.components,a=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,t.Z)({},o,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Main Giveaway V2 CC. Supports intuitive usage via ",(0,r.kt)("inlineCode",{parentName:"p"},"execCC"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Trigger Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Command")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"giveaway")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage:"),(0,r.kt)("br",{parentName:"p"}),"\n","Read the ",(0,r.kt)("a",{parentName:"p",href:"/yagpdb-cc/giveaway/basic_v2/basicv2README"},"README")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Command is very long so you MUST remove the comment and the next one after it (",(0,r.kt)("inlineCode",{parentName:"p"},"{{/*CONFIGURATION VALUES START*/}}"),") for it to save properly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'{{/*\n        Main Giveaway V2 CC. Supports execCC invoke. Usage: Read README.md\n\n        Recommended Trigger: Command trigger with trigger `giveaway`\n        (Can also work with `regex` and `starts with` triggers if triggers are correctly set)\n\n        Note: Command is very long so you MUST remove this comment and the next one after it ("{{/*CONFIGURATION VALUES START*/}}") for it to save properly.\n*/}}\n\n{{/*CONFIGURATION VALUES START*/}}\n{{$giveawayEmoji:=`\ud83c\udf89`}}{{/*Set Giveaway Emoji*/}}\n{{/*CONFIGURATION VALUES END*/}}\n\n{{/*Actual Code*/}}\n\n{{/*Global variables*/}}\n{{$syntaxError:=0}}{{$CmdArgs:=""}}{{$StrippedMsg:=""}}{{$Cmd:=""}}{{$ExecData:=0}}\n{{/*Set data according to Direct Invoke, Invole via ExecCC or giveaway End handling*/}}\n{{if not .ExecData}}{{$CmdArgs =.CmdArgs}}{{$StrippedMsg =reReplace `\\A\\s+|\\s+\\z` .StrippedMsg ""}}{{$Cmd =.Cmd}}\n{{else if toInt .ExecData}}{{$ExecData =str .ExecData}}\n{{else if eq (printf "%T" .ExecData) "string"}}\n{{$args:=split .ExecData " "}}\n{{if gt (len $args) 1}}\n{{$StrippedMsg =reReplace `(\\A\\s+)|(\\s+\\z)` (joinStr " " (slice $args 1)) ""}}\n{{$Cmd =index $args 0}}{{$CmdArgs =split (reReplace `\\s{2,}` $StrippedMsg " ") " "}}\n{{end}}\n{{end}}\n\n{{/*Is Giveaway Ending Handling?*/}}\n{{if  not $ExecData }}\n{{if gt (len $CmdArgs) 0 }}\n{{$subCmd:=lower (index $CmdArgs 0)}}\n{{if or (gt (len $CmdArgs) 1) (eq $subCmd "list") (eq $subCmd "reroll")}}\n\n{{/*Command-Start*/}}\n{{if eq $subCmd "start"}}\n\n{{/*Variable Declarations*/}}\n{{$CmdArgs:=reReplace (print `(?i)\\A` $subCmd `\\s*`) $StrippedMsg ""}}\n{{$maxP:=-1}}{{$maxW:=1}}{{$chan:=.Channel.ID}}{{$ID:=""}}\n{{$uID:=toInt (currentTime.Sub (newDate 2019 10 10 0 0 0)).Seconds}}\n\n\n{{/*Handling flags, parsing data from input*/}}\n{{with reFindAllSubmatches `(?i)-w (\\d+)(?:\\s+|\\z)` $CmdArgs}}\n        {{$CmdArgs =reReplace (index . 0 0) $CmdArgs ""}}\n        {{$maxW =toInt (index . 0 1)}}\n{{end}}\n\n{{with reFindAllSubmatches `(?i)-p (\\d+)(?:\\s+|\\z)` $CmdArgs}}\n        {{$CmdArgs =reReplace (index . 0 0) $CmdArgs ""}}\n        {{$maxP = toInt (index . 0 1)}}\n{{end}}\n\n{{with reFindAllSubmatches `(?i)(-c (?:<#)?(\\d+)>?(?:\\s+|$))` $CmdArgs}}\n        {{$CmdArgs =reReplace (index . 0 0) $CmdArgs ""}}\n        {{$chan =index . 0 2}}\n{{end}}\n\n{{$temp:=split $CmdArgs  " "}}\n\n{{/*To Duration*/}} \n{{$duration:=toDuration (index $temp 0)}}\n{{$prize := ""}}\n{{if gt (len $temp) 1}}{{$prize =joinStr " " (slice $temp 1)}}{{end}}\n{{$prize =reReplace `\\A\\s+` $prize ""}}\n\n{{/*if valid duration & prize*/}}\n{{if and ($duration)  ($prize)}} \n\n{{/*if max Participants > max Winners*/}}\n{{if or (ge $maxP $maxW) (eq $maxP -1)}}\n\n{{/*Giveaway Announcement*/}}\n{{with sendMessageNoEscapeRetID $chan (cembed "title" "loading...")}}\n\n{{/*Make giveaway sdict data Structure*/}}\n{{$ID =joinStr "" $chan .}}\n{{$giveawaySdict := sdict "chan" $chan "count" 0 "ID" $ID "listID" "" "maxWinners"  $maxW "maxParticipants" $maxP "expiresAt" (currentTime.Add $duration) "prize" $prize "uID" $uID "host" $.User.Mention}} \n\n{{/*Send Actual Announcement Message*/}}\n{{addMessageReactions $chan . $giveawayEmoji}}\n{{$desc:=print  `>>> **Prize : **` $prize "\\n\\n"}}\n{{if gt $maxW 0}}{{$desc =print $desc "**Max Winners :** " $maxW }}{{end}}\n{{if gt $maxP 0}}{{$desc =print $desc "\u2800\u2800\u2800\u2800\u2800**Max Participants :** " $maxP}}{{end}}\n{{$desc =print $desc "\\n\\n**Hosted By :** " $.User.Mention "\\n\\n**React with " $giveawayEmoji " to enter GiveAway **"}}\n{{editMessageNoEscape $chan . (cembed "title" "\ud83c\udf1f\ud83c\udf1f**GiveAway Started !!**\ud83c\udf1f\ud83c\udf1f" "description"  $desc "color" 16763170 "footer" (sdict "text" (print "ID: " $uID " | GiveAway Ends " )) "timestamp" $giveawaySdict.expiresAt) }}\n\n{{/*Update database values; schedule giveaway end*/}}\n{{$dbData:=sdict (or (dbGet 7777 "giveaway_active").Value sdict)}}\n{{$dbData.Set $ID $giveawaySdict}}{{dbSet 7777 "giveaway_active" $dbData}}\n{{$dbData =sdict (or (dbGet 7777 "giveaway_active_IDs").Value sdict)}}\n{{$dbData.Set (str $uID) $ID}}{{dbSet 7777 "giveaway_active_IDs" $dbData}}\n{{scheduleUniqueCC $.CCID $chan $duration.Seconds $uID  $ID}}\n\n{{else}}\n**Invalid Channel !!**\n{{end}}\n\n{{else}}\n**Error:** Max Winners cannot be more than Max Participants!!\n{{end}}\n\n{{else}}\n**Error:** Invalid Duration or Prize !!\n{{end}}\n\n{{/*Command-End*/}}\n{{else if eq $subCmd "end"}}\n{{$uID:=index $CmdArgs 1}}\n{{/*if giveaways active*/}}\n{{with (dbGet 7777 "giveaway_active").Value}}\n{{/*if uID is valid*/}}\n{{$ID:=index (dbGet 7777 "giveaway_active_IDs").Value $uID}}\n{{with (index . (str $ID))}}\n{{/*reschedule giveaway to end instantly*/}}\n{{cancelScheduledUniqueCC $.CCID .uID}}{{$s := sendTemplate .chan "g_end" "ID" (str $ID)}}\n\n{{else}}\n**Error:** Invalid ID ``{{$uID}}``\n{{end}}\n\n{{else}}\n**Error:** No Active Giveaways.\n{{end}}\n\n{{/*Command Cancel*/}}\n{{else if eq $subCmd "cancel"}}\n{{$uID := index $CmdArgs 1}}{{$ID:=0}}\n\n{{/*Checking if any giveaways are active*/}}\n{{with (dbGet 7777 "giveaway_active").Value}}\n{{$dbID:=(dbGet 7777 "giveaway_active_IDs").Value}}{{$ID =index $dbID $uID}}\n\n{{/*if ID is valid*/}}\n{{with (index . (str $ID))}}\n{{/*cancelling giveaway end scheduled cc, updating giveaway announcement msg*/}}\n{{$chan:=.chan}}{{$prize:=.prize}}{{$host:=.host}}\n{{cancelScheduledUniqueCC $.CCID .uID}}\n{{$msg:=index ( split $ID (str $chan)) 1}}\n{{with (getMessage $chan $msg )}}{{editMessage $chan $msg (cembed "title" "\ud83c\udf1f\ud83c\udf1f**GiveAway Cancelled !!**\ud83c\udf1f\ud83c\udf1f" "description" (print ">>> **Prize :** "  $prize "\\n\\n**Hosted By : **" $host) "footer" (sdict "text" "Giveaway Cancelled") "color" 12257822 )}}{{end}}Done!\n\n{{else}}\n**Error:** Invalid ID ``{{$uID}}``\n{{end}}\n\n{{/*if found, update giveaway database*/}}\n{{if $ID}}\n{{$newdbData:=sdict .}}{{$newdbData.Del $ID}}\n{{dbSet 7777 "giveaway_active" $newdbData}}\n{{$newdbData =sdict $dbID}}{{$newdbData.Del $uID}}\n{{dbSet 7777 "giveaway_active_IDs" $newdbData}}\n{{end}}\n\n{{else}}\n**Error:** No Active Giveaways.\n{{end}}\n\n{{/*Command-Reroll*/}}\n{{else if eq $subCmd "reroll"}}\n{{$ID:=1}}\n{{if gt (len $CmdArgs) 1}}{{$ID =toInt (index $CmdArgs 1)}}{{end}}\n{{$found:=false}}\n\n{{/*Search for giveaway*/}}\n{{if ($e:=(dbGet 7777 "giveaway_old").Value)}}\n{{range $i,$v:=$e}}\n{{if or (eq (sub (len $e) $i) $ID) (eq (toInt $v.uID) $ID)}}\n{{$found =true}}{{$s:= sendTemplate $v.chan "g_end" "ID" (str $v.ID) "Data" $v}}\n{{end}}\n{{end}}\n{{/*Display Error if no match*/}}\n{{if not $found}}**Error** - Invalid Argument `{{index $CmdArgs 1}}`. Old Giveaway with corresponding ID or Position(1-10) not found!{{end}}\n{{else}}\n**Error:** No Old Giveaways.\n{{end}}\n\n{{/*Command List*/}}\n{{else if eq $subCmd "list"}}\n\n{{/*check if giveaways active*/}}\n{{with (dbGet 7777 "giveaway_active").Value}}\n{{$count := 0}}\n\n{{/*List all active giveaway data fields*/}}\n{{range $k , $v:=.}}{{$count =add $count 1}} \n{{$count}}) **ID:** ``{{$v.uID}}``  **Prize:** ``{{$v.prize}}``\n**Ends AT:** ``{{formatTime $v.expiresAt}}``\n{{end}}\n\n{{else}}\nNo Active Giveaways.\n{{end}}\n\n{{/*update global flag for incorrect syntax*/}}\n{{else}}\n{{$syntaxError =1}}\n{{end}}\n{{else}}\n{{$syntaxError =1}}\n{{end}}\n{{else}}\n{{$syntaxError =1}}\n{{end}}\n\n{{else}}\n{{/*Giveaway Ending handling*/}}\n{{$s := sendTemplate nil "g_end" "ID" $ExecData}}\n{{end}}\n\n{{define "g_end"}}\n{{/*Set Variables*/}}\n{{$ID:=.TemplateArgs.ID}}{{$chan:=.Channel.ID}}\n{{$dbData:=(dbGet 7777 "giveaway_active").Value}}{{with .TemplateArgs.Data}}{{$dbData =sdict (str $ID) .}}{{end}}\n\n\n{{/*Proceed only if invoked with valid ID or active giveaways exist*/}}\n{{if $dbData}}\n{{with (index $dbData $ID)}}\n{{$countWinners:=toInt .maxWinners}} {{$count:=toInt .count}}\n\n{{/*if reaction count < max winners; update no of winners to find*/}}\n{{if lt $count $countWinners}}{{$countWinners = $count}}{{end}}\n{{$msg:=index ( split $ID (str $chan)) 1}}\n{{$listID:=.listID}}\n\n{{/*Consider reactions/user IDs upto max allowed number if count > maxParticipants*/}}\n{{if and (gt $count .maxParticipants) (gt .maxParticipants 0)}}{{$count =.maxParticipants}}{{$listID =joinStr "," (slice (split $listID ",") 0 $count) ""}}{{end}}\n\n{{/*Computing list of winner mentions*/}}\n{{$winnerList:=""}}\n{{range seq 0 $countWinners}}\n{{$winner:=index (split $listID ",") (randInt 0 $count )}}\n{{$listID =reReplace (print $winner ",") $listID ""}}{{$count = add $count -1}}\n{{$winnerList =(print $winnerList "<@" $winner "> ")}}\n{{end}}\n\n{{/*Update existing giveaway announce message*/}}\n{{$desc:=print ">>> **Prize :** " .prize "\\n\\n**Winners :** " }}\n{{if  $countWinners }}{{$desc =print $desc $winnerList}}{{else}}{{$desc =print $desc "No Participants :( "}}{{end}}\n{{$desc:=print $desc "\\n\\n**Hosted By :** " .host}}\n{{with (getMessage $chan $msg )}}{{editMessage $chan $msg (cembed "title" "\ud83c\udf1f\ud83c\udf1f**GiveAway Ended !!**\ud83c\udf1f\ud83c\udf1f" "description" $desc "footer" (sdict "text" "Giveaway Ended at ") "timestamp" currentTime "color" 12257822 )}}{{end}}\n\n{{/*Announce winners*/}}\n{{if $countWinners}}\n{{sendMessage nil (print "**Prize :** " .prize "\\n**Winner(s) :** " $winnerList)}}\n{{else}}\n**Giveaway Ended, No participants :( !!**\n**Prize : {{.prize}}**\n{{end}}\n\n{{/*Update giveaway databases*/}}\n{{if not $.TemplateArgs.Data}}\n{{$newdbData:=sdict $dbData}}{{$newdbData.Del $ID}}\n{{dbSet 7777 "giveaway_active" $newdbData}}\n{{$newdbData =sdict (dbGet 7777 "giveaway_active_IDs").Value}}{{$newdbData.Del (str .uID)}}\n{{dbSet 7777 "giveaway_active_IDs" $newdbData}}\n{{$old:= cslice.AppendSlice (or (dbGet 7777 "giveaway_old").Value cslice)}}{{if gt (len $old) 9}}{{$old =slice $old 1}}{{end}}\n{{dbSet 7777 "giveaway_old" ($old.Append .)}}\n{{end}}\n\n{{else}}`Warning:` Invoked CC : {{$.CCID}} using ExecCC with invalid Giveaway ID.\n{{end}}\n{{else}}`Warning:` Invoked CC : {{$.CCID}} using ExecCC with no active Giveaways.\n{{end}}\n\n{{end}}\n\n{{/*print error message & syntax details*/}}\n{{if $syntaxError}}\n{{sendMessage nil (print "__**Incorrect Syntax** __ \\n**Commands are :** \\n```elm\\n" ($Cmd) " start <time : Duration> <prize : String> \\n\\noptional_flags \\n-p (max participants : Number) \\n-w (max winners : Number)\\n-c (channel : Mention/ID)\\n```\\n```elm\\n" ($Cmd) " end <id : Number>```\\n```elm\\n" ($Cmd) " cancel <id : Number>```\\n```elm\\n" ($Cmd) " reroll [id or n giveaways old : Number]```\\n```elm\\n"  ($Cmd) " list ``` ")}}\n{{end}}\n\n')))}l.isMDXComponent=!0}}]);