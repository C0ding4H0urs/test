(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9416],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5087:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],s={title:"Selection Sort"},c=void 0,l={unversionedId:"code-snippets/selection-sort",id:"code-snippets/selection-sort",isDocsHomePage:!1,title:"Selection Sort",description:"Code snippet for sorting an array/slice of comparable values of the same type in-place, using the selection sort algorithm.",source:"@site/docs/code-snippets/selection-sort.md",sourceDirName:"code-snippets",slug:"/code-snippets/selection-sort",permalink:"/code-snippets/selection-sort",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/code-snippets/selection-sort.md",version:"current",frontMatter:{title:"Selection Sort"},sidebar:"sidebar",previous:{title:"Parse Text",permalink:"/code-snippets/parse-text"},next:{title:"Snowflake to Time",permalink:"/code-snippets/snowflake2time"}},p=[{value:"Code",id:"code",children:[]},{value:"Usage",id:"usage",children:[{value:"Sorting in ascending order",id:"sorting-in-ascending-order",children:[]}]},{value:"Author",id:"author",children:[]}],d={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Code snippet for sorting an array/slice of comparable values of the same type in-place, using the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Selection_sort"},"selection sort")," algorithm."),(0,a.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},'Though this works fine for small slices/array, due to the inefficient nature of selection sort, running it on "large" slices/arrays (over 200-300 elements) will result in a runtime error. If you want to use this snippet, be careful and constrain your input sizes.'))),(0,a.kt)("h2",{id:"code"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"file=../../../src/code_snippets/selection_sort.go.tmpl",file:"../../../src/code_snippets/selection_sort.go.tmpl"},"{{/*\n    Sorts an array/slice of numbers descending or ascending in place.\n    See <https://yagpdb-cc.github.io/code-snippets/selection-sort> for more information.\n\n    Author: jo3-l <https://github.com/jo3-l>\n*/}}\n\n{{/* Let $arr be the array/slice to sort. */}}\n{{ $arr := cslice 1 38 -1 83 -4 5 1 0 }}\n\n{{ $len := len $arr }}\n{{ range seq 0 $len }}\n    {{- $min := . }}\n    {{- range seq (add . 1) $len }}\n        {{- if lt (index $arr $min) (index $arr .) }} {{- $min = . }} {{- end -}}\n    {{- end }}\n    {{- if ne $min . }}\n        {{- $ := index $arr . }}\n        {{- $arr.Set . (index $arr $min) }}\n        {{- $arr.Set $min $ }}\n    {{- end -}}\n{{ end }}\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"First, add the code snippet above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"{{/* code snippet goes here */}}\n")),(0,a.kt)("p",null,"Next, change the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"$arr")," to the value you want to sort:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:"{3}","{3}":!0},"{{/* Let $arr be the array/slice to sort. */}}\n- {{ $arr := cslice 1 38 -1 83 -4 5 1 0 }}\n+ {{ $arr := theSliceIWantToSort }}\n{{/* rest of code snippet goes here */}}\n")),(0,a.kt)("p",null,"Voila, ",(0,a.kt)("inlineCode",{parentName:"p"},"$arr")," is now sorted! You can check that it was by outputting ",(0,a.kt)("inlineCode",{parentName:"p"},"$arr"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"{2}","{2}":!0},"{{/* code snippet goes here */}}\n`$arr` after sorting: `{{json $arr}}`\n")),(0,a.kt)("h3",{id:"sorting-in-ascending-order"},"Sorting in ascending order"),(0,a.kt)("p",null,"You may have noticed that the above snippet sorts the array in descending order by default - larger numbers come first. That may not be desirable for your use case; perhaps you want smaller numbers to come first. In that case, you just have to change ",(0,a.kt)("inlineCode",{parentName:"p"},"lt")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"gt")," in the following part of the code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:"{4}","{4}":!0},"{{/* rest of code snippet */}}\n{{- range seq (add . 1) $len }}\n-   {{- if lt (index $arr $min) (index $arr .) }} {{- $min = . }} {{- end -}}\n+   {{- if gt (index $arr $min) (index $arr .) }} {{- $min = . }} {{- end -}}\n{{- end }}\n{{/* rest of code snippet */}}\n")),(0,a.kt)("h2",{id:"author"},"Author"),(0,a.kt)("p",null,"This code snippet was written by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jo3-l"},"@jo3-l"),"."))}u.isMDXComponent=!0}}]);