"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[76],{3905:function(e,t,n){n.d(t,{Zo:function(){return $},kt:function(){return b}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},$=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,$=i(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,m=u["".concat(d,".").concat(b)]||u[b]||c[b]||s;return n?a.createElement(m,o(o({ref:t},$),{},{components:n})):a.createElement(m,o({ref:t},$))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9919:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return l}});var a=n(3117),r=(n(7294),n(3905));const s={title:"Reaction Handler"},o=void 0,i={unversionedId:"fun/starboard/reaction-handler",id:"fun/starboard/reaction-handler",title:"Reaction Handler",description:"This command allows users to react to messages within the starboard channel with stars/anti-stars.",source:"@site/docs/fun/starboard/reaction-handler.md",sourceDirName:"fun/starboard",slug:"/fun/starboard/reaction-handler",permalink:"/fun/starboard/reaction-handler",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/fun/starboard/reaction-handler.md",tags:[],version:"current",frontMatter:{title:"Reaction Handler"},sidebar:"sidebar",previous:{title:"Main CC",permalink:"/fun/starboard/main-cc"},next:{title:"Animal Image Generator",permalink:"/fun/animal"}},d={},l=[{value:"Trigger",id:"trigger",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],$={toc:l};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},$,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This command allows users to react to messages within the starboard channel with stars/anti-stars."),(0,r.kt)("p",null,"For more information about the starboard system, see ",(0,r.kt)("a",{parentName:"p",href:"overview"},"this")," page."),(0,r.kt)("h2",{id:"trigger"},"Trigger"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Reaction"),(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Additional options:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Added + Removed Reactions")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This command should be set to ",(0,r.kt)("em",{parentName:"p"},"only run")," in your starboard channel in the channel restrictions.")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"overview/#configuration"},"starboard system overview")," for in-depth information about configuration."),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../../src/fun/starboard_v2/reaction_handler.go.tmpl",file:"../../../../src/fun/starboard_v2/reaction_handler.go.tmpl"},'{{/*\n    Allows users to react to messages within the starboard channel with stars/anti-stars.\n    See <https://yagpdb-cc.github.io/fun/starboard/reaction-handler> for more information.\n\n    Author: dvoraknt <https://github.com/dvoraknt>\n*/}}\n\n{{/* Configurable values */}}\n{{$starEmoji := "\u2b50"}}\n{{$starEmFull := "\u2b50"}}\n{{$starLimit := 4}}\n{{$starboard := 712681639410663516}}\n{{$maxAge := "2w"}}\n{{$selfStarEnable := false}}\n{{$warnMessages := false}}\n\n{{$antiStarEnable := false}}\n{{$antiStarEmoji := "\u274c"}}\n{{$antiStarEmFull := "\u274c"}}\n{{$antiStarExtra := 0}}\n{{/* End of configurable values */}}\n\n{{$starboardMessage := 0}}{{$thisID := 0}}{{$chanID := 0}}{{$count := 0}}{{$antiCount := 0}}\n{{$starboardMessage = .ReactionMessage.ID}}\n{{with (dbGet 0 "starboardMessages").Value}}{{$data := (print . )}}\n    {{$idRegex := printf `(\\d+):%d:(\\d+)` $starboardMessage}}\n    {{with reFindAllSubmatches $idRegex .}} {{$thisID = index . 0 1}} {{$chanID = index . 0 2}} {{end}}\n    {{if gt (len $data) 90000}}\n        {{dbSet 0 "starboardMessages" (reReplace `\\A(?:\\n?(?:\\d+:){2}\\d+\\n?){160}` $data "")}}\n    {{end}}\n{{end}}\n\n{{$data := ""}}{{$sboardPost := print $thisID}}{{$skip := true}}{{$starboardData := ""}}\n{{if and (or (eq .Reaction.Emoji.Name $starEmoji) (eq .Reaction.Emoji.Name $antiStarEmoji)) (not .User.Bot)}}\n    {{if not (dbGet 0 "starboardReactions")}}{{dbSet 0 "starboardReactions" (sdict $sboardPost (sdict "ID" $sboardPost "listID" (print .User.ID ",")))}}{{end}}\n    {{with (dbGet 0 "starboardReactions").Value}}{{$data = sdict .}}{{end}}\n    {{$starboardData = $data.Get $sboardPost}}\n\n    {{if and .ReactionAdded (not $selfStarEnable) (eq .User.ID ((getMessage $chanID $thisID).Author).ID)}}\n        {{deleteMessageReaction $starboard $starboardMessage .User.ID $starEmFull $antiStarEmFull}}\n        {{if $warnMessages}}{{$ret := sendMessageRetID nil (print .User.Mention " You can\'t influence your own post!")}}\n        {{deleteMessage $starboard $ret 3}}{{end}}\n    {{else if $starboardData}}\n        {{$starboardData = sdict $starboardData}}\n\n        {{if gt (len (print $data)) 18000}}\n            {{$dataSlice := cslice}}\n            {{range $k, $v := $data}}{{- $dataSlice = $dataSlice.Append (cslice $k $v) -}}{{end}}\n            {{$lenCount := 0}}{{$toDel := cslice}}\n            {{range $dataSlice}}\n                {{- if lt $lenCount 2000}}\n                    {{- $lenCount = add $lenCount (len (print .)) -}}\n                    {{- $toDel = $toDel.Append (index . 0)}}\n            {{- end -}}{{- end -}}\n            {{range $toDel}}\n                {{- $data.Del . -}}\n        {{- end -}}{{- end -}}\n\n        {{if and .ReactionAdded (eq .Reaction.Emoji.Name $starEmoji)}}\n            {{if reFind (print "PO" .User.ID ",") $starboardData.listID}}\n                {{deleteMessageReaction $starboard $starboardMessage .User.ID $starEmFull}}\n                {{if $warnMessages}}{{$ret := sendMessageRetID nil (print .User.Mention " You already reacted on the post!")}}\n                {{deleteMessage $starboard $ret 3}}{{end}}\n            {{else if reFind (print .User.ID ",") $starboardData.listAnti}}\n                {{deleteMessageReaction $starboard $starboardMessage .User.ID $starEmFull}}\n                {{if $warnMessages}}{{$ret := sendMessageRetID nil (print .User.Mention " You can\'t star and anti-star the same message!")}}\n                {{deleteMessage $starboard $ret 3}}{{end}}\n            {{else}}\n                {{$IDregex:= print "SB" .User.ID ","}}\n                {{$starboardData.Set "listID" (print $starboardData.listID  $IDregex)}}\n                {{$skip = false}}\n            {{end}}\n\n        {{else if eq .Reaction.Emoji.Name $starEmoji}}\n            {{$IDregex := print "SB" .User.ID ","}}\n            {{if reFind $IDregex $starboardData.listID}}\n                {{$starboardData.Set "listID" (reReplace $IDregex $starboardData.listID "")}}\n            {{end}}\n            {{$skip = false}}\n        {{end}}\n\n        {{if and $antiStarEnable .ReactionAdded (eq .Reaction.Emoji.Name $antiStarEmoji)}}\n            {{if reFind (print "PO" .User.ID ",") $starboardData.listAnti}}\n                {{deleteMessageReaction $starboard $starboardMessage .User.ID $antiStarEmFull}}\n                {{if $warnMessages}}{{$ret := sendMessageRetID nil (print .User.Mention " You already reacted on the post!")}}\n                {{deleteMessage $starboard $ret 3}}{{end}}\n            {{else if reFind (print .User.ID ",") $starboardData.listID}}\n                {{deleteMessageReaction $starboard $starboardMessage .User.ID $antiStarEmFull}}\n                {{if $warnMessages}}{{$ret := sendMessageRetID nil (print .User.Mention " You can\'t star and anti-star the same message!")}}\n                {{deleteMessage $starboard $ret 3}}{{end}}\n            {{else}}\n                {{$IDregex:= print "SB" .User.ID ","}}\n                {{$starboardData.Set "listAnti" (print $starboardData.listAnti  $IDregex)}}\n                {{$skip = false}}\n            {{end}}\n\n        {{else if and $antiStarEnable (eq .Reaction.Emoji.Name $antiStarEmoji)}}\n            {{$IDregex := print "SB" .User.ID ","}}\n            {{if reFind $IDregex $starboardData.listAnti}}\n                {{$starboardData.Set "listAnti" (reReplace $IDregex $starboardData.listAnti "")}}\n            {{end}}\n            {{$skip = false}}\n        {{end}}\n\n    {{$data.Set $sboardPost $starboardData}}\n    {{dbSet 0 "starboardReactions" $data}}\n\n    {{else}}\n        {{$data.Set $sboardPost (sdict "ID" $sboardPost "listID" (print .User.ID ","))}}\n        {{dbSet 0 "starboardReactions" $data}}\n        {{$skip = false}}\n    {{end}}\n{{end}}\n\n{{$countTwo := 0}}{{$antiCountTwo := 0}}\n{{range .ReactionMessage.Reactions}}\n    {{- if eq .Emoji.Name $starEmoji}}\n        {{- $countTwo = .Count}}\n    {{- end -}}\n    {{- if and $antiStarEnable (eq .Emoji.Name $antiStarEmoji)}}\n        {{- $antiCountTwo = .Count}}\n    {{- end -}}\n{{end}}\n\n{{range (getMessage $chanID $thisID).Reactions}}\n    {{- if eq .Emoji.Name $starEmoji}}\n        {{- $count = (sub (add $countTwo .Count) 1)}}\n    {{- end -}}\n    {{- if and $antiStarEnable (eq .Emoji.Name $antiStarEmoji)}}\n        {{- $antiCount = (sub (add $antiCountTwo .Count) 1)}}\n    {{else if $antiStarEnable}}\n        {{- $antiCount = sub $antiCountTwo 1}}\n    {{- end -}}\n{{end}}\n\n{{if not $antiStarEnable}} {{$antiStarExtra = 0}} {{end}} {{/*resetting count to zero to prevent user configured variable from interrupting desired functionality*/}}\n{{if and (not $skip) (or (lt $count $starLimit) (ge (add $antiCount $antiStarExtra) $count))}}\n{{with (dbGet 0 "starboardMessages").Value}}\n    {{$idRegex := printf `\\n%s:(\\d+):(\\d+)` $thisID}}\n    {{with reFindAllSubmatches $idRegex .}} {{$starboardMessage = index . 0 1}} {{end}}\n        {{deleteMessage $starboard $starboardMessage 0}}\n        {{dbSet 0 "starboardMessages" (reReplace $idRegex . "")}}\n    {{end}}\n\n     {{if $starboardData}}\n        {{$nil := $starboardData.Set "listID" (reReplace `SB\\d+,` $starboardData.listID "")}}\n        {{$nil := $starboardData.Set "listAnti" (reReplace `SB\\d+,` $starboardData.listAnti "")}}\n        {{$data.Set $sboardPost $starboardData}}\n        {{dbSet 0 "starboardReactions" $data}}\n    {{end}}\n\n{{else if and $count (not $skip) (or (eq .Reaction.Emoji.Name $starEmoji) (eq .Reaction.Emoji.Name $antiStarEmoji)) (le (currentTime.Sub .Message.Timestamp.Parse) (toDuration $maxAge))}}\n\n    {{$emoji := "\ud83c\udf20"}}\n    {{if lt $count 5}} {{$emoji = "\u2b50"}}\n    {{else if lt $count 10}} {{$emoji = "\ud83c\udf1f"}}\n    {{else if lt $count 15}} {{$emoji = "\u2728"}}\n    {{else if lt $count 20}} {{$emoji = "\ud83d\udcab"}}\n    {{else if lt $count 30}} {{$emoji = "\ud83c\udf87"}}\n    {{else if lt $count 40}} {{$emoji = "\ud83c\udf86"}}\n    {{else if lt $count 50}} {{$emoji = "\u2604\ufe0f"}}\n    {{end}}\n\n    {{$embed := structToSdict (index ((getMessage $starboard $starboardMessage).Embeds) 0)}}\n    {{range $k, $v := $embed}}\n        {{- if eq (kindOf $v true) "struct"}}\n        {{- $embed.Set $k (structToSdict $v)}}\n    {{- end -}}{{end}}\n    {{if $embed.Author}} {{$embed.Author.Set "Icon_URL" $embed.Author.IconURL}} {{end}}\n    {{if $embed.Footer}} {{$embed.Footer.Set "Icon_URL" $embed.Footer.IconURL}} {{end}}\n\n    {{$embed.Set "footer" (sdict "text" (printf "%s %d | %s" $emoji $count $thisID))}}\n    {{editMessage $starboard $starboardMessage (cembed $embed)}}\n{{end}}\n')),(0,r.kt)("h2",{id:"author"},"Author"),(0,r.kt)("p",null,"This custom command was written by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dvoraknt"},"@dvoraknt"),"."))}c.isMDXComponent=!0}}]);