(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5334],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return c},kt:function(){return d}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function p(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=t.createContext({}),u=function(e){var n=t.useContext(a),r=n;return e&&(r="function"==typeof e?e(n):p(p({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(a.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=u(r),d=o,m=g["".concat(a,".").concat(d)]||g[d]||l[d]||i;return r?t.createElement(m,p(p({ref:n},c),{},{components:r})):t.createElement(m,p({ref:n},c))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,p=new Array(i);p[0]=g;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,p[1]=s;for(var u=2;u<i;u++)p[u]=r[u];return t.createElement.apply(null,p)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},9029:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return s},contentTitle:function(){return a},metadata:function(){return u},toc:function(){return c},default:function(){return g}});var t=r(2122),o=r(9756),i=(r(7294),r(3905)),p=["components"],s={sidebar_position:4,title:"listgroups"},a=void 0,u={unversionedId:"funccs/YAGPDB-CAH-groups/listgroups",id:"funccs/YAGPDB-CAH-groups/listgroups",isDocsHomePage:!1,title:"listgroups",description:"This command deletes a group of CAH card packs.",source:"@site/docs/funccs/YAGPDB-CAH-groups/listgroups.md",sourceDirName:"funccs/YAGPDB-CAH-groups",slug:"/funccs/YAGPDB-CAH-groups/listgroups",permalink:"/funccs/YAGPDB-CAH-groups/listgroups",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/funccs/YAGPDB-CAH-groups/listgroups.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"listgroups"},sidebar:"tutorialSidebar",previous:{title:"endgame",permalink:"/funccs/YAGPDB-CAH-groups/endgame"},next:{title:"newgame",permalink:"/funccs/YAGPDB-CAH-groups/newgame"}},c=[],l={toc:c};function g(e){var n=e.components,r=(0,o.Z)(e,p);return(0,i.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This command deletes a group of CAH card packs."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Trigger Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Command")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"listgroups")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage:"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"-listgroups")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'{{/*\n    This command lists all currently configured CAH card pack groups.\n\n    Usage: `-listgroups`\n\n    Recommended trigger: `listgroups`\n    Trigger type: Command\n\n    Credits:\n    LRitzdorf <https://github.com/LRitzdorf>\n*/}}\n\n{{ $pattern := "" }}\n{{ if ne (len .CmdArgs) 0 }}\n    Filtering groups by `{{index .CmdArgs 0}}` and ignoring other arguments.\n    {{- $pattern = joinStr "" "group %" (index .CmdArgs 0) "%" }}\n{{- else }}\n    {{- $pattern = "group %" }}\n{{- end }}\n{{- $groups := dbGetPattern 0 $pattern 100 0 }}\n`Group name` - pack-1 pack-2 ...\n{{ range $groups }}\n    {{- $strippedKey := slice .Key 6 (len .Key) }}\n`{{$strippedKey}}` - {{.Value}}\n{{- else }}\n    No pack groups defined. Use `-setgroup "group name" "pack-1 pack-2 ..."` to set some up!\n{{ end }}\n')))}g.isMDXComponent=!0}}]);