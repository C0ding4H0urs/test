"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6973],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),m=i,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(g,s(s({ref:n},u),{},{components:t})):r.createElement(g,s({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6254:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return a},metadata:function(){return o},toc:function(){return c}});var r=t(3117),i=(t(7294),t(3905));const a={title:"JSON Converter"},s=void 0,o={unversionedId:"utilities/json-converter",id:"utilities/json-converter",title:"JSON Converter",description:"This command displays information about messages. In particular, it shows parts of the message in JSON, hence the name.",source:"@site/docs/utilities/json-converter.md",sourceDirName:"utilities",slug:"/utilities/json-converter",permalink:"/utilities/json-converter",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/utilities/json-converter.md",tags:[],version:"current",frontMatter:{title:"JSON Converter"},sidebar:"sidebar",previous:{title:"Ghost-Ping Detector v2",permalink:"/utilities/ghost-ping-v2"},next:{title:"Random Color",permalink:"/utilities/random-color"}},l={},c=[{value:"Trigger",id:"trigger",level:2},{value:"Usage",id:"usage",level:2},{value:"Optional Flags",id:"optional-flags",level:3},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],u={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This command displays information about messages. In particular, it shows parts of the message in JSON, hence the name."),(0,i.kt)("h2",{id:"trigger"},"Trigger"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Command"),(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-json <channel|'0'> <message>")," - Displays information about the message provided. ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," denotes current channel.")),(0,i.kt)("h3",{id:"optional-flags"},"Optional Flags"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-f")," - Displays message attachments."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-j")," - Uses a cleaner format for the message JSON.")),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/utilities/json.go.tmpl",file:"../../../src/utilities/json.go.tmpl"},'{{/*\n    Displays messages as JSON.\n    See <https://yagpdb-cc.github.io/utilities/json-converter> for more information.\n\n    Author: Devonte <https://github.com/devnote-dev>\n*/}}\n\n{{ $a := parseArgs 2 "```json <Channel:Mention> <Message:ID>\\njson <Channel:Name> <Message:ID>\\njson <Channel:ID> <Message:ID>\\njson 0 <Message:ID>\\n```**Optional Flags:**\\n```\\n[-j strict-format:flag]\\n[-file/f attachment:flag]```"\n(carg "string" "chan") (carg "int" "msgID") (carg "string" "flag: -j | -f") }}\n\n{{ $type := dict 0 "Default Message" 6 "Pinned Message" 7 "Join Message" 8 "Boost Message" 9 "Teir 1 Boost Message" 10 "Teir 2 Boost Message" 11 "Teir 3 Boost Message" 12 "Followed Channel Message" 19 "Reply Message" }}\n\n{{ $struct := "Unknown" }} {{ $ver := "JSONify v4.15" }} {{ $fa := false }} {{ $chan := .Channel }} {{ $ce := true }} {{ $ctx := "" }}\n\n{{ $link := joinStr "/" "https://discordapp.com/channels" .Guild.ID .Channel.ID ($a.Get 1) }}\n\n{{ $mainMessage := sendMessageRetID nil (cembed "description" "Converting Message... <a:loading:760219029620523008>") }}\n\n{{ if ne ($a.Get 0) "0" }}\n    {{ $chan = getChannelOrThread (or (reFind `\\d+` ($a.Get 0)) ($a.Get 0)) }}\n\n    {{ with $chan }} {{ $link = joinStr "/" "https://discordapp.com/channels" $.Guild.ID .ID ($a.Get 1) }}\n    {{ else }} {{ $ce = false }}\n    {{ end }}\n{{ end }}\n\n{{ if $ce }}\n    {{ if ($msg := getMessage $chan.ID ($a.Get 1)) }}\n        {{ with $msg.Embeds }} {{ $struct = print (title (index . 0).Type) " Embed" }}\n        {{ else }} {{ $struct = or (and $msg.Attachments "Attachment Message") ($type.Get (toInt $msg.Type)) $struct }}\n        {{ end }}\n\n        {{ $time := div $msg.ID 4194304|mult 1000000|toDuration }}\n        {{ $json := json $msg }}\n\n        {{ if ($a.IsSet 2) }}\n            {{ if (reFind `-j` ($a.Get 2)) }}{{ $json = reReplace `,` $json ",\\n" }}{{ end }}\n            {{ if (reFind `-f(?:ile)?` ($a.Get 2)) }}{{ $ctx = "The downloadable file attachment will be sent shortly. \ud83d\udc4c" }}{{ $fa = true }}{{ end }}\n        {{ end }}\n\n        {{ if or (ge (len $json) 2048) (reFind `\\[(?:{.*},?){4,}\\]` $json) }}\n            {{ $ctx = "The message you requested was either too big or contained something that would crash the CC. To prevent this, a downloadable attachment version will be sent instead." }}\n            {{ $fa = true }}\n        {{ end }}\n\n        {{ if $fa }}\n            {{ deleteMessage nil $mainMessage 0 }}\n            {{ sendMessage nil (complexMessage "content" $ctx "file" (printf "REQUESTED BY: %s (%d)\\nDATE/TIME: %s\\nGUILD: %s (%d)\\nCHANNEL: %s (%d)\\nSNOWFLAKE: %s\\nJSON:\\n\\n%s" .User.String .User.ID currentTime .Guild.Name .Guild.ID .Channel.Name .Channel.ID $time $json)) }}\n        {{ else }}\n            {{ $e := cembed\n                "author" (sdict "name" (print "Triggered by " .User.String) "icon_url" (.User.AvatarURL "256"))\n                "title" "JSON Output"\n                "description" (print "```json\\n" $json "\\n```")\n                "fields" (cslice\n                    (sdict "name" "Channel" "value" (print "<#" $chan.ID ">\\n(ID " $chan.ID ")") "inline" true)\n                    (sdict "name" "Message ID" "value" (print ($a.Get 1) "\\n[Click here](" $link ") to go to message.") "inline" true)\n                    (sdict "name" "Message Type" "value" $struct "inline" true)\n                    (sdict "name" "Snowflake (Age)" "value" (humanizeDurationSeconds (currentTime.Sub ($time|.DiscordEpoch.Add))) "inline" true)\n                    (sdict "name" "Size" "value" (print (fdiv (len $json) 1000) "kb") "inline" true))\n                "footer" (sdict "text" $ver) }}\n            {{ editMessage nil $mainMessage (complexMessageEdit "embed" $e) }}\n        {{ end }}\n    {{ else }}\n        {{ editMessage nil $mainMessage (complexMessageEdit "embed" (cembed "title" "Error" "description" "Unkown message. Please try again.")) }}\n    {{ end }}\n{{ else }}\n    {{ editMessage nil $mainMessage (complexMessageEdit "embed" (cembed "title" "Error" "description" "Unknown channel. Please try again.")) }}\n{{ end }}\n')),(0,i.kt)("h2",{id:"author"},"Author"),(0,i.kt)("p",null,"This custom command was written by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/devnote-dev"},"@devnote-dev"),"."))}d.isMDXComponent=!0}}]);