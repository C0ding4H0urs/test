(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9557],{3905:function(e,r,n){"use strict";n.d(r,{Zo:function(){return c},kt:function(){return m}});var t=n(7294);function l(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){l(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,l=function(e,r){if(null==e)return{};var n,t,l={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(l[n]=e[n]);return l}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=t.createContext({}),d=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},c=function(e){var r=d(e.components);return t.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,l=e.mdxType,s=e.originalType,i=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=d(n),m=l,g=u["".concat(i,".").concat(m)]||u[m]||p[m]||s;return n?t.createElement(g,o(o({ref:r},c),{},{components:n})):t.createElement(g,o({ref:r},c))}));function m(e,r){var n=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var s=n.length,o=new Array(s);o[0]=u;var a={};for(var i in r)hasOwnProperty.call(r,i)&&(a[i]=r[i]);a.originalType=e,a.mdxType="string"==typeof e?e:l,o[1]=a;for(var d=2;d<s;d++)o[d]=n[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1072:function(e,r,n){"use strict";n.r(r),n.d(r,{frontMatter:function(){return a},contentTitle:function(){return i},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var t=n(2122),l=n(9756),s=(n(7294),n(3905)),o=["components"],a={sidebar_position:3,title:"Role Rewards CC"},i=void 0,d={unversionedId:"leveling/rolerewards",id:"leveling/rolerewards",isDocsHomePage:!1,title:"Role Rewards CC",description:"This command manages the role rewards of the server.",source:"@site/docs/leveling/rolerewards.md",sourceDirName:"leveling",slug:"/leveling/rolerewards",permalink:"/leveling/rolerewards",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/leveling/rolerewards.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Role Rewards CC"},sidebar:"tutorialSidebar",previous:{title:"Leveling CC",permalink:"/leveling/leveling"},next:{title:"Message Listener CC",permalink:"/leveling/messagelistender"}},c=[],p={toc:c};function u(e){var r=e.components,n=(0,l.Z)(e,o);return(0,s.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This command manages the role rewards of the server."),(0,s.kt)("p",null,"Types of role giving:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"stack: Users get all roles up to current level ","[DEFAULT]"),(0,s.kt)("li",{parentName:"ul"},"highest: Users get the last role reward closet to current level ","[MAY BE BUGGY]")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Trigger Type:")," ",(0,s.kt)("inlineCode",{parentName:"p"},"Regex")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,s.kt)("inlineCode",{parentName:"p"},"\\A(-|<@!?204255221017214977>\\s*)(role-?rewards|rr)(\\s+|\\z)")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Usage:"),(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("inlineCode",{parentName:"p"},"-rr add <level> <role name>")," - Adds a role reward to given level in range 1-100. Max 1 per level.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("inlineCode",{parentName:"p"},"-rr remove <level>")," - Removes role reward from level.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("inlineCode",{parentName:"p"},"-rr set-type <stack|highest>")," - Sets type of role giving.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("inlineCode",{parentName:"p"},"-rr view")," - Views current setup",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("inlineCode",{parentName:"p"},"-rr reset")," - Resets the settings"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'{{/*\n    This command manages the role rewards of the server.\n\n    Types of role giving:\n    - stack: Users get all roles up to current level [DEFAULT]\n    - highest: Users get the last role reward closet to current level [MAY BE BUGGY]\n\n    Usage:\n\n    -rr add <level> <role name> | Adds a role reward to given level in range 1-100. Max 1 per level.\n    -rr remove <level> | Removes role reward from level.\n    -rr set-type <stack|highest> | Sets type of role giving.\n    -rr view | Views current setup\n    -rr reset | Resets the settings\n\n    Recommended trigger: Regex trigger with trigger `\\A(-|<@!?204255221017214977>\\s*)(role-?rewards|rr)(\\s+|\\z)`\n*/}}\n{{/* Help message */}}\n{{ $helpMsg := cembed\n    "title" "\ud83c\udfc6 Role Rewards"\n    "description" (joinStr "\\n\\n"\n        "`rolerewards add <level> <role>`: Adds a role reward at the given level"\n        "`rolerewards remove <level>`: Removes the role reward from the given level"\n        "`rolerewards set-type <highest|stack>`: Sets the role reward type. Highest means only the highest role reward less than or equal to the current level, stack is all role rewards up to that level."\n        "`rolerewards reset`: Resets role reward settings."\n        "`rolerewards view`: Views current settings for role rewards."\n    )\n    "color" 14232643\n}}\n{{ if .CmdArgs }}\n    {{ $roleRewards := sdict "type" "stack" }} {{/* The default setup */}}\n    {{ with (dbGet 0 "roleRewards") }}\n        {{ $roleRewards = sdict .Value }} {{/* Update with DB entry if present */}}\n    {{ end }}\n    {{ $cmd := index .CmdArgs 0 }} {{/* The subcommand used for convenience */}}\n\n    {{ if and (eq $cmd "add") (ge (len .CmdArgs) 3) }}\n        {{ $level := index .CmdArgs 1 | toInt }} {{/* The level for this role reward */}}\n        {{ $input := slice .CmdArgs 2 | joinStr " " | lower }} {{/* The role name in lowercase */}}\n\n        {{/* Exact match (irregardless of case) */}}\n        {{ $exactRole := 0 }}\n        {{/* Match from inFold */}}\n        {{ $maybeRole := 0 }}\n\n        {{ with reFindAllSubmatches `^<@&(\\d{17,19})>|(\\d{17,19})$` $input }}\n            {{ $id := toInt (or (index . 0 1) (index . 0 2)) }}\n            {{ range $.Guild.Roles }}\n                {{- if eq .ID $id }} {{ $exactRole = . }} {{ end -}}\n            {{ end }}\n        {{ else }}\n            {{ range .Guild.Roles }}\n                {{- if eq (lower .Name) (lower $input) }} {{ $exactRole = . }}\n                {{- else if inFold (lower .Name) (lower $input) }} {{ $maybeRole = . }}\n                {{- end -}}\n            {{ end }}\n        {{ end }}\n\n        {{ $role := or $exactRole $maybeRole }}\n        {{/* If there is both level and role */}}\n        {{ if and $level $role }}\n            {{ if and (ge $level 1) (le $level 200) }} {{/* If level is in correct range */}}\n                {{ $roleRewards.Set (str $level) $role.ID }}\n                {{ $s := dbSet 0 "roleRewards" $roleRewards }} {{/* Save settings */}}\n                Successfully set the role `{{ $role.Name }}` to be given at the level `{{ $level }}`.\n            {{ else }}\n                Sorry, the level provided was not in the range 1-200.\n            {{ end }}\n        {{ else }}\n            Sorry, I was unable to find the role you provided / the level provided was invalid.\n        {{ end }}\n\n    {{ else if and (eq $cmd "set-type") (ge (len .CmdArgs) 2) }}\n        {{ $type := index .CmdArgs 1 }}\n        {{ if not (in (cslice "stack" "highest") $type) }} {{/* Check whether type is valid */}}\n            Sorry, that was not a valid type. The type must be either "stack" or "highest".\n        {{ else }}\n            {{ $roleRewards.Set "type" $type }}\n            {{ $s := dbSet 0 "roleRewards" $roleRewards }} {{/* Save settings */}}\n            Successfully set the role-giving type of this server to `{{ $type }}`.\n        {{ end }}\n\n    {{ else if eq $cmd "reset" }}\n        {{ $s := dbSet 0 "roleRewards" (sdict "type" "stack") }} {{/* We set the settings to default */}}\n        Alright, I cleared the role rewards for this server!\n\n    {{ else if and (eq $cmd "remove") (ge (len .CmdArgs) 2) }}\n        {{ with (reFind `\\d+` (index .CmdArgs 1)) }} {{/* Find level to remove */}}\n            {{ if $roleRewards.Get . }}\n                {{ $roleRewards.Del . }}\n                {{ $s := dbSet 0 "roleRewards" $roleRewards }}\n                Successfully removed the role reward from the level `{{ . }}`.\n            {{ else }}\n                Sorry, there is not a role reward set for that level!\n            {{ end }}\n        {{ else }}\n            Please provide a valid level to remove the role reward from.\n        {{ end }}\n\n    {{ else if eq $cmd "view" }}\n        {{ if eq (len $roleRewards) 1 }} {{/* If it is still the default settings */}}\n            {{ sendMessage nil (cembed "title" "Role Rewards" "thumbnail" (sdict "url" "https://i.imgur.com/mJ7zu6k.png") "description" (joinStr "" "**\u276f Role Rewards:** n/a\\n**\u276f Type:** " $roleRewards.type)) }}\n        {{ else }}\n            {{ $out := "" }} {{/* The embed description */}}\n            {{ range $level := seq 1 201 }} {{- /* We can do this as we know level roles are in range 1-100 */}}\n                {{- with ($roleRewards.Get (str $level)) }}\n                    {{- $out = printf "%s\\n\u276f **Level %d:** <@&%d>" $out $level . }}\n                {{- end -}}\n            {{ end }}\n            {{/* Format and send embed */}}\n            {{ sendMessage nil (cembed "title" "Role Rewards" "thumbnail" (sdict "url" "https://i.imgur.com/mJ7zu6k.png") "description" (joinStr "" $out "\\n\\n" "**\u276f Type:** " $roleRewards.type)) }}\n        {{ end }}\n\n    {{ else }}\n        {{ sendMessage nil $helpMsg }}\n    {{ end }}\n{{ else }}\n    {{ sendMessage nil $helpMsg }}\n{{ end }}\n')))}u.isMDXComponent=!0}}]);