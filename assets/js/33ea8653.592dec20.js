(self.webpackChunkyagpdb_cc_website=self.webpackChunkyagpdb_cc_website||[]).push([[2329],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return o},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},o=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,s(s({ref:t},o),{},{components:n})):r.createElement(f,s({ref:t},o))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6568:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return o},default:function(){return u}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),s=["components"],l={sidebar_position:8,title:"Standardize"},c=void 0,p={unversionedId:"snippets/standardize",id:"snippets/standardize",isDocsHomePage:!1,title:"Standardize",description:"This is a snippet which converts all internal maps/slices in a multi layered data structure to sdict/cslice respectively.",source:"@site/docs/snippets/standardize.md",sourceDirName:"snippets",slug:"/snippets/standardize",permalink:"/snippets/standardize",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/yagpdb-cc-website/docs/snippets/standardize.md",version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Standardize"},sidebar:"tutorialSidebar",previous:{title:"Snowflake to Time",permalink:"/snippets/snowflake2time"},next:{title:"String to Time",permalink:"/snippets/string2time"}},o=[],d={toc:o};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is a snippet which converts all internal maps/slices in a multi layered data structure to ",(0,i.kt)("inlineCode",{parentName:"p"},"sdict"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"cslice")," respectively.",(0,i.kt)("br",{parentName:"p"}),"\n","It is most useful when retrieving deserialized data from the database which needs to be converted."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example usage:"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},'{{ template "standardize" ($data := sdict "Value" $MY_VALUE) }}\n{{ $standardized := $data.Result }}')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'{{/* \n    This is a snippet which converts all internal maps/slices in a multi layered data structure to sdict/cslice respectively.\n    It is most useful when retrieving deserialized data from the database which needs to be converted.\n\n    Example usage:\n    \n    {{ template "standardize" ($data := sdict "Value" $MY_VALUE) }}\n    {{ $standardized := $data.Result }}\n*/}}\n\n{{ define "standardize" }}\n    {{- $kind := kindOf .Value true }}\n    {{- $typ := printf "%T" .Value }}\n    {{- $arg := sdict }}\n    {{- $result := "" }}\n\n    {{- if and (eq $kind "map") (not (eq $typ "templates.Dict" "templates.SDict")) }}\n        {{- $result = dict }}\n        {{- range $k, $v := .Value }} {{- $result.Set $k $v -}} {{- end }}\n    {{- else if and (eq $kind "array" "slice") (ne $typ "templates.Slice") }}\n        {{- $result = cslice.AppendSlice .Value }}\n    {{- else if eq $typ "templates.Dict" "templates.SDict" "templates.Slice" }}\n      {{- $result = .Value }}\n    {{- end }}\n\n    {{- if print $result }}\n        {{- range $k, $v := $result }}\n            {{- $kind := kindOf $v true }}\n            {{- if eq $kind "array" "slice" "map" }}\n                {{- $arg.Set "Value" $v -}}\n                {{- template "standardize" $arg -}}\n                {{- $result.Set $k $arg.Result }}\n            {{- end -}}\n        {{- end }}\n    {{- else }} {{- $result = .Value }} {{- end }}\n\n    {{- .Set "Result" $result -}}\n{{ end }}\n')))}u.isMDXComponent=!0}}]);