(self.webpackChunkyagpdb_cc_website=self.webpackChunkyagpdb_cc_website||[]).push([[1967],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),m=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=m(e.components);return i.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=m(n),d=r,g=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return n?i.createElement(g,a(a({ref:t},l),{},{components:n})):i.createElement(g,a({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var m=2;m<o;m++)a[m]=n[m];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9117:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c},default:function(){return l}});var i=n(2122),r=n(9756),o=(n(7294),n(3905)),a={sidebar_position:3,title:"Big Emoji"},s={unversionedId:"utilities/bigemoji",id:"utilities/bigemoji",isDocsHomePage:!1,title:"Big Emoji",description:"This command allows you to enlarge emojis.",source:"@site/docs/utilities/bigemoji.md",sourceDirName:"utilities",slug:"/utilities/bigemoji",permalink:"/yagpdb-cc/utilities/bigemoji",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/yagpdb-cc-website/docs/utilities/bigemoji.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Big Emoji"},sidebar:"tutorialSidebar",previous:{title:"Big Emoji V2",permalink:"/yagpdb-cc/utilities/bigemojiv2"},next:{title:"Bookmark",permalink:"/yagpdb-cc/utilities/bookmark"}},c=[],m={toc:c};function l(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This command allows you to enlarge emojis."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Trigger Type:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Regex")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"\\A(-|<@!?204255221017214977>\\s*)(be|big-?emo(te|ji))(\\s+|\\z)(\\s+|\\z)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Usage:"),(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"-bigemoji <emoji>")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'{{/*\n    This command allows you to enlarge emojis. Usage: `-bigemoji <emoji>`.\n\n    Recommended trigger: Regex trigger with trigger `\\A(-|<@!?204255221017214977>\\s*)(be|big-?emo(te|ji))(\\s+|\\z)(\\s+|\\z)`\n*/}}\n\n{{ if .CmdArgs }}\n    {{ $embed := sdict }} {{ $emoji := index .CmdArgs 0 }}\n        {{ if reFind `\\p{So}|.\\x{20e3}` $emoji }}\n            {{ $emoji_U := "" }}\n            {{ $url := "https://raw.githubusercontent.com/iamcal/emoji-data/master/img-twitter-64/" }}\n            {{- range toRune $emoji }}\n                {{- $emoji_U = joinStr "-" $emoji_U (printf "%04x" .) }}\n            {{- end -}}\n            {{ $url = joinStr "" $url $emoji_U ".png" }}\n            {{ $embed.Set "image"  (sdict "url" $url) }}\n        {{ else }}\n            {{ with reFindAllSubmatches `<(a)?:[\\w~]+:(\\d+)>` $emoji }}\n                {{ $animated := index . 0 1 }}\n                {{ $id := index . 0 2 }}\n                {{ $ext := ".png" }}\n                {{ if $animated }} {{ $ext = ".gif" }} {{ end }}\n                {{ $embed.Set "image"  (sdict "url" (printf "https://cdn.discordapp.com/emojis/%s%s" $id $ext)) }}\n            {{ end }}\n        {{ end }}\n        \n        {{$ID := 0}}\n        {{if $embed}}\n            {{ $embed.Set "color" 0x39ff14 }}\n            {{ $embed.Set "author" (sdict "name" .User.Username "icon_url" (.User.AvatarURL "256")) }}\n            {{ $ID = sendMessageRetID nil (cembed $embed) }}\n        {{ end }}\n    \n        {{ sleep 1 }} {{/* This just puts a standard output when no matching image is found. You can also use deleteMessage here */}}\n        {{ with getMessage nil $ID }}\n            {{ if not (index .Embeds 0).Image.Width }}\n                {{ $embed.Set "description" $emoji}} {{ $embed.Del "image" }}\n                {{ editMessage nil $ID (cembed $embed) }}\n            {{ end }}\n        {{ end }}\n{{ end }}\n{{ deleteTrigger 0 }}\n')))}l.isMDXComponent=!0}}]);