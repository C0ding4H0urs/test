(self.webpackChunkyagpdb_cc_website=self.webpackChunkyagpdb_cc_website||[]).push([[5334],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return u},kt:function(){return d}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function p(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?p(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},p=Object.keys(e);for(t=0;t<p.length;t++)r=p[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)r=p[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,p=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),g=c(r),d=o,m=g["".concat(s,".").concat(d)]||g[d]||l[d]||p;return r?t.createElement(m,i(i({ref:n},u),{},{components:r})):t.createElement(m,i({ref:n},u))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var p=r.length,i=new Array(p);i[0]=g;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<p;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},9029:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return g}});var t=r(2122),o=r(9756),p=(r(7294),r(3905)),i=["components"],a={sidebar_position:4,title:"listgroups"},s=void 0,c={unversionedId:"funccs/YAGPDB-CAH-groups/listgroups",id:"funccs/YAGPDB-CAH-groups/listgroups",isDocsHomePage:!1,title:"listgroups",description:"This command deletes a group of CAH card packs.",source:"@site/docs/funccs/YAGPDB-CAH-groups/listgroups.md",sourceDirName:"funccs/YAGPDB-CAH-groups",slug:"/funccs/YAGPDB-CAH-groups/listgroups",permalink:"/funccs/YAGPDB-CAH-groups/listgroups",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/yagpdb-cc-website/docs/funccs/YAGPDB-CAH-groups/listgroups.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"listgroups"},sidebar:"tutorialSidebar",previous:{title:"endgame",permalink:"/funccs/YAGPDB-CAH-groups/endgame"},next:{title:"newgame",permalink:"/funccs/YAGPDB-CAH-groups/newgame"}},u=[],l={toc:u};function g(e){var n=e.components,r=(0,o.Z)(e,i);return(0,p.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"This command deletes a group of CAH card packs."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Trigger Type:")," ",(0,p.kt)("inlineCode",{parentName:"p"},"Command")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,p.kt)("inlineCode",{parentName:"p"},"listgroups")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Usage:"),(0,p.kt)("br",{parentName:"p"}),"\n",(0,p.kt)("inlineCode",{parentName:"p"},"-listgroups")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-go"},'{{/*\n    This command lists all currently configured CAH card pack groups.\n\n    Usage: `-listgroups`\n\n    Recommended trigger: `listgroups`\n    Trigger type: Command\n\n    Credits:\n    LRitzdorf <https://github.com/LRitzdorf>\n*/}}\n\n{{ $pattern := "" }}\n{{ if ne (len .CmdArgs) 0 }}\n    Filtering groups by `{{index .CmdArgs 0}}` and ignoring other arguments.\n    {{- $pattern = joinStr "" "group %" (index .CmdArgs 0) "%" }}\n{{- else }}\n    {{- $pattern = "group %" }}\n{{- end }}\n{{- $groups := dbGetPattern 0 $pattern 100 0 }}\n`Group name` - pack-1 pack-2 ...\n{{ range $groups }}\n    {{- $strippedKey := slice .Key 6 (len .Key) }}\n`{{$strippedKey}}` - {{.Value}}\n{{- else }}\n    No pack groups defined. Use `-setgroup "group name" "pack-1 pack-2 ..."` to set some up!\n{{ end }}\n')))}g.isMDXComponent=!0}}]);