(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8837],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5800:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),s=["components"],o={title:"Parse Flags"},l=void 0,p={unversionedId:"code-snippets/parse-flags",id:"code-snippets/parse-flags",isDocsHomePage:!1,title:"Parse Flags",description:"This code snippet provides a reusable template which you can add to your custom commands.",source:"@site/docs/code-snippets/parse-flags.md",sourceDirName:"code-snippets",slug:"/code-snippets/parse-flags",permalink:"/code-snippets/parse-flags",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/code-snippets/parse-flags.md",version:"current",frontMatter:{title:"Parse Flags"},sidebar:"sidebar",previous:{title:"Ordinal",permalink:"/code-snippets/ordinal"},next:{title:"Parse Text",permalink:"/code-snippets/parse-text"}},c=[{value:"Code",id:"code",children:[]},{value:"Usage",id:"usage",children:[{value:"Flags",id:"flags",children:[]},{value:"Switches",id:"switches",children:[]},{value:"Positional arguments",id:"positional-arguments",children:[]}]},{value:"Author",id:"author",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This code snippet provides a reusable template which you can add to your custom commands.",(0,i.kt)("br",{parentName:"p"}),"\n","It separates predefined flags from positional arguments within input, for example:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-command -m 123 positional arg -f"),"\nmight be parsed into:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"positional:\n    - positional\n    - arg\nflags:\n    m: '123'\n    f: true\n")),(0,i.kt)("p",null,"Licensed under the terms of the Unlicense."),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/code_snippets/parse_flags.go.tmpl",file:"../../../src/code_snippets/parse_flags.go.tmpl"},'{{/*\n    Separates predefined flags from positional arguments within input.\n    See <https://yagpdb-cc.github.io/code-snippets/parse-flags> for more information.\n\n    Licensed under the terms of the Unlicense.\n    Author: jo3-l <https://github.com/jo3-l>\n*/}}\n\n{{define "parseFlags"}}\n    {{.Set "Out" (sdict\n        "Positional" (cslice)\n        "Flags" (dict)\n    )}}\n\n    {{$curFlag := ""}}\n    {{$lastIdx := sub (len .Args) 1}}\n    {{range $i, $arg := .Args}}\n        {{- if $curFlag}}\n            {{- $.Out.Flags.Set $curFlag $arg}}\n            {{- $curFlag = ""}}\n        {{- else if and ($id := $.Flags.Get $arg) (ne $i $lastIdx)}}\n            {{- $curFlag = $id}}\n        {{- else if $id := $.Switches.Get $arg}}\n            {{- $.Out.Flags.Set $id true}}\n        {{- else}}\n            {{- $.Out.Set "Positional" ($.Out.Positional.Append $arg)}}\n        {{- end -}}\n    {{end}}\n{{end}}\n')),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"First, copy the above snippet to the top of your code.",(0,i.kt)("br",null),"\nTo use it, you will need to construct a map holding the flags, switches, and input argument slice to parse."),(0,i.kt)("p",null,"In this example, we will be parsing a command similar in structure to the ",(0,i.kt)("inlineCode",{parentName:"p"},"rolemenu create")," built-in command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gotmpl"},'{{/* code snippet goes here */}}\n{{$query := dict\n    "Flags" (dict\n        "-m" "MessageID"\n        "-msg" "MessageID"\n\n        "-skip" "Skip"\n        "-s" "Skip"\n    )\n\n    "Switches" (dict\n        "-nodm" "NoDM"\n        "-rr" "RemoveRole"\n    )\n\n    "Args" .CmdArgs\n}}\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Flags take on the value that is after them, while switches are simple on-off switches (hence the name)."))),(0,i.kt)("p",null,"Now, let's run the template, passing our query as the data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"{18}","{18}":!0},'{{/* code snippet goes here */}}\n{{$query := dict\n    "Flags" (dict\n        "-m" "MessageID"\n        "-msg" "MessageID"\n\n        "-skip" "Skip"\n        "-s" "Skip"\n    )\n\n    "Switches" (dict\n        "-nodm" "NoDM"\n        "-rr" "RemoveRole"\n    )\n\n    "Args" .CmdArgs\n}}\n{{template "parseFlags" $query}}\n')),(0,i.kt)("p",null,"Running the template causes our input map to be filled with the parsed data, which we can access via ",(0,i.kt)("inlineCode",{parentName:"p"},"$query.Out"),"."),(0,i.kt)("h3",{id:"flags"},"Flags"),(0,i.kt)("p",null,'Access flags by their ID (the value in the map supplied to parseFlags).\nThe value will be nil if the user did not supply that flag; otherwise it will\nbe the argument directly after the flag. For example, $msgID would have the value "1"\nif the input was "-m 1".'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"{{$msgID := $query.Out.Flags.MessageID}}")),(0,i.kt)("h3",{id:"switches"},"Switches"),(0,i.kt)("p",null,"Same thing for switches. In this case, the value will be nil if the user did not supply\nthat switch; otherwise it will be 'true'."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"{{$nodm := $query.Out.Switches.NoDM}}")),(0,i.kt)("h3",{id:"positional-arguments"},"Positional arguments"),(0,i.kt)("p",null,'Finally, we can access any excess arguments that are neither flags nor switches by indexing\ninto the Positional slice. In this case, $first would have the value "a" if the input was\n"a -nodm -m 123".'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"{{$first := index $query.Out.Positional 0}}")),(0,i.kt)("h2",{id:"author"},"Author"),(0,i.kt)("p",null,"This code snippet was written by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jo3-l"},"@jo3-l"),"."))}d.isMDXComponent=!0}}]);