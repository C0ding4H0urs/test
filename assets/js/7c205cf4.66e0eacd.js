(self.webpackChunkyagpdb_cc_website=self.webpackChunkyagpdb_cc_website||[]).push([[5334],{3905:function(e,r,n){"use strict";n.d(r,{Zo:function(){return u},kt:function(){return d}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function p(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?p(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},p=Object.keys(e);for(t=0;t<p.length;t++)n=p[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)n=p[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),c=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},u=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},l={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},g=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,p=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=c(n),d=o,m=g["".concat(s,".").concat(d)]||g[d]||l[d]||p;return n?t.createElement(m,a(a({ref:r},u),{},{components:n})):t.createElement(m,a({ref:r},u))}));function d(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var p=n.length,a=new Array(p);a[0]=g;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<p;c++)a[c]=n[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9029:function(e,r,n){"use strict";n.r(r),n.d(r,{frontMatter:function(){return a},metadata:function(){return i},toc:function(){return s},default:function(){return u}});var t=n(2122),o=n(9756),p=(n(7294),n(3905)),a={sidebar_position:4,title:"listgroups"},i={unversionedId:"funccs/YAGPDB-CAH-groups/listgroups",id:"funccs/YAGPDB-CAH-groups/listgroups",isDocsHomePage:!1,title:"listgroups",description:"This command deletes a group of CAH card packs.",source:"@site/docs/funccs/YAGPDB-CAH-groups/listgroups.md",sourceDirName:"funccs/YAGPDB-CAH-groups",slug:"/funccs/YAGPDB-CAH-groups/listgroups",permalink:"/yagpdb-cc/funccs/YAGPDB-CAH-groups/listgroups",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/yagpdb-cc-website/docs/funccs/YAGPDB-CAH-groups/listgroups.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"listgroups"},sidebar:"tutorialSidebar",previous:{title:"endgame",permalink:"/yagpdb-cc/funccs/YAGPDB-CAH-groups/endgame"},next:{title:"newgame",permalink:"/yagpdb-cc/funccs/YAGPDB-CAH-groups/newgame"}},s=[],c={toc:s};function u(e){var r=e.components,n=(0,o.Z)(e,["components"]);return(0,p.kt)("wrapper",(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"This command deletes a group of CAH card packs."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Trigger Type:")," ",(0,p.kt)("inlineCode",{parentName:"p"},"Command")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,p.kt)("inlineCode",{parentName:"p"},"listgroups")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Usage:"),(0,p.kt)("br",{parentName:"p"}),"\n",(0,p.kt)("inlineCode",{parentName:"p"},"-listgroups")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-go"},'{{/*\n    This command lists all currently configured CAH card pack groups.\n\n    Usage: `-listgroups`\n\n    Recommended trigger: `listgroups`\n    Trigger type: Command\n\n    Credits:\n    LRitzdorf <https://github.com/LRitzdorf>\n*/}}\n\n{{ $pattern := "" }}\n{{ if ne (len .CmdArgs) 0 }}\n    Filtering groups by `{{index .CmdArgs 0}}` and ignoring other arguments.\n    {{- $pattern = joinStr "" "group %" (index .CmdArgs 0) "%" }}\n{{- else }}\n    {{- $pattern = "group %" }}\n{{- end }}\n{{- $groups := dbGetPattern 0 $pattern 100 0 }}\n`Group name` - pack-1 pack-2 ...\n{{ range $groups }}\n    {{- $strippedKey := slice .Key 6 (len .Key) }}\n`{{$strippedKey}}` - {{.Value}}\n{{- else }}\n    No pack groups defined. Use `-setgroup "group name" "pack-1 pack-2 ..."` to set some up!\n{{ end }}\n')))}u.isMDXComponent=!0}}]);