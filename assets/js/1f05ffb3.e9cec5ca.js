"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2186],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(t),c=r,f=p["".concat(l,".").concat(c)]||p[c]||m[c]||o;return t?i.createElement(f,a(a({ref:n},u),{},{components:t})):i.createElement(f,a({ref:n},u))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var d=2;d<o;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},591:function(e,n,t){t.d(n,{Z:function(){return o}});var i=t(7294),r=["Administrator","ManageServer","ReadMessages","SendMessages","SendTTSMessages","ManageMessages","EmbedLinks","AttachFiles","ReadMessageHistory","MentionEveryone","VoiceConnect","VoiceSpeak","VoiceMuteMembers","VoiceDeafenMembers","VoiceMoveMembers","VoiceUseVAD","ManageNicknames","ManageRoles","ManageWebhooks","ManageEmojis","CreateInstantInvite","KickMembers","BanMembers","ManageChannels","AddReactions","ViewAuditLogs"],o=function(){return i.createElement("details",null,i.createElement("summary",null,i.createElement("strong",null,"Available permissions:")),i.createElement("ul",null,r.map((function(e){return i.createElement("li",null,i.createElement("code",null,e))}))))}},7662:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return m},default:function(){return c}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),a=t(591),s=["components"],l={title:"Notes"},d=void 0,u={unversionedId:"moderation/notes",id:"moderation/notes",isDocsHomePage:!1,title:"Notes",description:"A system bringing staff notes to your server.",source:"@site/docs/moderation/notes.md",sourceDirName:"moderation",slug:"/moderation/notes",permalink:"/moderation/notes",editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/moderation/notes.md",tags:[],version:"current",frontMatter:{title:"Notes"},sidebar:"sidebar",previous:{title:"Nickname Moderation",permalink:"/moderation/nickname-moderation"},next:{title:"Slowmode",permalink:"/moderation/slowmode"}},m=[{value:"The Problem",id:"the-problem",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Code",id:"code",children:[]},{value:"FAQ",id:"faq",children:[]},{value:"Author",id:"author",children:[]},{value:"Trivia",id:"trivia",children:[]}],p={toc:m};function c(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A system bringing staff notes to your server.")),(0,o.kt)("h2",{id:"the-problem"},"The Problem"),(0,o.kt)("p",null,"As it stands, there is no good way to share notes about users across server staff and the one Discord provides is heavily limited:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Notes can only be set on a per-user basis"),(0,o.kt)("li",{parentName:"ul"},"Notes can only be 256 characters long"),(0,o.kt)("li",{parentName:"ul"},"You cannot set multiple notes easily")),(0,o.kt)("p",null,"On larger servers however, this may become an issue. This custom command aims to solve this problem.\nIt provides every functionality a server may need, that is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Server staff can set up to ten different notes on one individual user, maxing out at 500 characters each"),(0,o.kt)("li",{parentName:"ul"},"Server staff can easily view notes of each user, as well as delete them when necessary"),(0,o.kt)("li",{parentName:"ul"},"Server administrators can purge the entire system if need be")),(0,o.kt)("h4",{id:"trigger"},"Trigger"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Type"),": RegEx ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"Trigger"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"\\A(?:\\-|<@!?204255221017214977>)\\s*notes?(?: +|\\z)"),"\n",(0,o.kt)("strong",{parentName:"p"},"Case-Sensitive"),": false"),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Make sure to replace ",(0,o.kt)("inlineCode",{parentName:"p"},"-")," with your prefix, should it be different."))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"notes help"),": List all subcommands"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"notes set <user> <text>"),": set a note on user"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"notes get <user>"),": get all user's notes"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"notes del <user> <id>"),": delete given note on user"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"notes delall <user>"),": delete all notes on user"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"notes nuke"),": delete all ever recorded notes")),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)(a.Z,{mdxType:"AvailablePermissionsDisplay"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\ud83d\udccc ",(0,o.kt)("inlineCode",{parentName:"p"},"$BASE_PERMISSION")," ",(0,o.kt)("br",null),"\nThis permission should be the permission which all server staff have - on most servers, this is ",(0,o.kt)("inlineCode",{parentName:"p"},"ManageMessages"),". If you want to lock this system behind a more exclusive permission, please view the full list under ",(0,o.kt)("inlineCode",{parentName:"p"},"$NUKE_PERMISSION")," - it lists all of them.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\ud83d\udccc ",(0,o.kt)("inlineCode",{parentName:"p"},"$DELETE_TIMEOUT")," ",(0,o.kt)("br",null),"\nThis variable sets the timeout when passwords for ",(0,o.kt)("inlineCode",{parentName:"p"},"delall")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"nuke")," should expire. It is not recommended to extend this duration beyond 5 minutes and below 10 seconds. Time intervals are specified using the formatting characters ",(0,o.kt)("inlineCode",{parentName:"p"},"y")," for ",(0,o.kt)("em",{parentName:"p"},"years"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"mo")," for ",(0,o.kt)("em",{parentName:"p"},"months"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"w")," for ",(0,o.kt)("em",{parentName:"p"},"weeks"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"d")," for ",(0,o.kt)("em",{parentName:"p"},"days"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"h")," for ",(0,o.kt)("em",{parentName:"p"},"hours"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," for ",(0,o.kt)("em",{parentName:"p"},"seconds"),". Do not remove the function ",(0,o.kt)("inlineCode",{parentName:"p"},"toDuration"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\ud83d\udccc ",(0,o.kt)("inlineCode",{parentName:"p"},"$NUKE_PERMISSION")," ",(0,o.kt)("br",null),"\nThis permission is quite a dangerous one: It grants the ability to purge the entire system. Most servers consider users with ",(0,o.kt)("inlineCode",{parentName:"p"},"ManageServer")," permission as an admin, hence this is the default. It is recommended to change this to a more exclusive permission rather than a common one. ",(0,o.kt)("inlineCode",{parentName:"p"},"Adminstrator")," would be a fitting candidate, as it's a quite rarely given permission, ",(0,o.kt)("inlineCode",{parentName:"p"},"ManageRoles")," however may not.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\ud83d\udccc ",(0,o.kt)("inlineCode",{parentName:"p"},"$PASSWD_CHARSET")," ",(0,o.kt)("br",null),"\nThis variable specifies the charset a password should be generated from. It is recommended to only add more characters rather than removing some. Please be advised that there should be always a reasonably large set available to pick from, otherwise passwords may become easy to guess. Do not separate individual characters by whitespaces, simply append them."))),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("p",null,"Copy the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/moderation/notes/notes_minified.go.tmpl",file:"../../../src/moderation/notes/notes_minified.go.tmpl"},'{{/*\n    This custom command adds staff note functionality to your server.\n\n    See <https://yagpdb-cc.github.io/moderation/notes>\n\n    Author: Luca Zeuch <https://github.com/l-zeuch>\n*/}}\n{{/* CONFIGURATION START */}}\n{{$NUKE_PERMISSION := .Permissions.ManageServer}}\n{{$BASE_PERMISSION := .Permissions.ManageMessages}}\n{{$DELETE_TIMEOUT := toDuration "2m"}}\n{{$PASSWD_CHARSET := toRune "AaBbCcDdEeFfGgHhIiJjKkLiMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789@\u20ac<>(){}[]!$%&?"}}\n{{/* CONFIGURATION END */}}\n\n{{/* ACTUAL CODE, DO NOT TOUCH */}}\n{{if not .ExecData}}\n{{$subcommand := ""}}\n{{$target := userArg nil}}\n{{$note := ""}}{{if ge (len .CmdArgs) 1}}\n{{$subcommand = index .CmdArgs 0}}\n{{end}}{{if ge (len .CmdArgs) 2}}\n{{$target = (getMember (index .CmdArgs 1))}}\n{{end}}{{if ge (len .CmdArgs) 3}}\n{{$note = joinStr " " (slice .CmdArgs 2)}}\n{{$note = reReplace `\\n|\\r|\\r\\n` $note " "}}\n{{end}}{{$valid_subcommands := cslice "help" "set" "get" "del" "delall" "nuke"}}\n{{$subcommands_string := joinStr "`, `" $valid_subcommands.StringSlice}}{{$prefix := index (reFindAllSubmatches `.*?: \\x60(.*)\\x60\\z` (execAdmin "prefix")) 0 1}}{{$err := ""}}\n{{$out := sdict}}{{$helper_embed := cembed "title" "Notes Help Page"\n"fields" (cslice\n(sdict "name" "\u2022 Basic Usage" "value" (printf "Valid subcommands are:`%s`.\\nIf none are given, this page is shown instead.```%snote <subcommand> (Arguments)```" $subcommands_string $prefix))\n(sdict "name" "\u2022 Help" "value" (printf "Shows this text!```%snote help```" $prefix))\n(sdict "name" "\u2022 Set" "value" (printf "Sets a note on a user with optional duration provided by `-duration` flag.```%snote set <User:Mention/ID> <Note:Text>```" $prefix))\n(sdict "name" "\u2022 Get" "value" (printf "Gets all notes of a user.```%snote get <User:Mention/ID>```" $prefix))\n(sdict "name" "\u2022 Del" "value" (printf "Deletes a given note of given user.```%snote del <User:Mention/ID> <NoteID:Whole Number>```The note ID can be obtained by running the `get` subcommand. The deleted note will be shown, in case you accidentally deleted the wrong one." $prefix))\n(sdict "name" "\u2022 Delall" "value" (printf "Deletes all notes of the given user.\\n:warning: **This action is irreversible.** :warning:```%snote delall <User:Mention/ID>```" $prefix))\n(sdict "name" "\u2022 Nuke" "value" (printf "Deletes all notes server-wide. Useful when you wish to remove this system, or want to clean it up.\\n:warning: **This action is irreversible. Don\'t run it \\"to test\\". It will work.** :warning:```%snote nuke```" $prefix))\n)\n"footer" (sdict "text" (printf "Triggered by %s" .User) "icon_url" (.User.AvatarURL "1024"))\n}}{{$has_perms := hasPermissions $BASE_PERMISSION}}\n{{$note_id := 1}}\n{{$time_format := currentTime.Format "Mon 02 Jan 15:04"}}\n{{if $has_perms}}\n{{if or (inFold "help" $subcommand) (not $subcommand)}}\n{{sendMessage nil $helper_embed}}\n{{else}}\n{{if or $target (inFold "nuke" $subcommand)}}\n{{if not (inFold "nuke" $subcommand)}}\n{{$target = $target.User}}\n{{$out = sdict "footer" (sdict "text" (printf "Triggered by %s" .User) "icon_url" (.User.AvatarURL "1024")) "thumbnail" (sdict "url" ($target.AvatarURL "1024")) "color" 0x00ff00}}\n{{end}}\n{{if inFold "set" $subcommand}}\n{{if le (len $note) 450}}\n{{$db_old := dbGet $target.ID "notes"}}\n{{if $db_old}}\n{{$db_old_split := split $db_old.Value "\\n"}}\n{{$last_id := reFind `\\A\\d+\\b` (index $db_old_split (sub (len $db_old_split) 1))|toInt}}\n{{$note_id = add $last_id 1}}\n{{if ge (len $db_old_split) 10}}\n{{$err = printf "This user currently has too many notes. Delete at least one to store a new one.\\nI\'ve remembered what you wanted to save:```%s```" $note}}\n{{end}}\n{{end}}\n{{dbSet $target.ID "notes" (printf "%s\\n%d %s: %s (%s)" (or $db_old.Value "") $note_id $time_format $note .User)}}\n{{if not $err}}\n{{$out.Set "title" (printf "Successfully set a new note for %s" $target)}}\n{{$out.Set "fields" (cslice\n(sdict "name" "\u2022 User:" "value" (printf "`%s` (ID `%d`)" $target $target.ID))\n(sdict "name" "\u2022 Note:" "value" (printf "ID: `%d`\\nText: %s (%s)" $note_id $note .User)))\n}}\n{{end}}\n{{else}}\n{{$err = printf "This note is too long (max 450 characters). Please try to shorten it, this is not a writing club.```%s```" $note}}\n{{end}}\n{{else if inFold "get" $subcommand}}\n{{$notes := (dbGet $target.ID "notes").Value}}\n{{$out.Set "title" (printf "Notes for %s (ID %d)" $target $target.ID)}}\n{{$out.Set "description" "None recorded."}}\n{{if $notes}}\n{{$out.Set "description" $notes}}\n{{if gt (len $notes) 4000}}\n{{$out.Set "description" (slice $notes 0 4000)}}\n{{$out.Set "fields" (cslice (sdict "name" "Continued..." "value" (slice $notes 4000)))}}\n{{end}}\n{{end}}\n{{else if inFold "del" $subcommand}}\n{{if eq (len .CmdArgs) 3}}\n{{$note_id = index .CmdArgs 2|toInt}}\n{{$db_old := split (dbGet $target.ID "notes").Value "\\n"}}\n{{$db_new := ""}}\n{{$old_note := ""}}\n{{range $db_old}}\n{{- if not (reFind (printf `\\A%d\\b` $note_id) .)}}\n{{- $db_new =  (printf "%s\\n%s" $db_new .)}}\n{{- else}}\n{{- $old_note = slice (toString .) 19}}\n{{- end -}}\n{{end}}\n{{dbSet $target.ID "notes" $db_new}}\n{{$out.Set "title" (printf "Successfully delete a note for %s" $target)}}\n{{$out.Set "description" (printf "Deleted note:```%s```" $old_note)}}\n{{else}}\n{{$err = "No matching combo found / invalid argument count.```-note del <User:Mention/ID> <NoteID:Whole Number>```"}}\n{{end}}\n{{else if inFold "delall" $subcommand}}\n{{if eq (len .CmdArgs) 2}}\n{{$passwd := ""}}\n{{range seq 0 12}}\n{{- $passwd = printf "%s%c" $passwd (index $PASSWD_CHARSET (randInt (len $PASSWD_CHARSET))) -}}\n{{end}}\n{{$out.Set "color" 0xffff00}}\n{{$out.Set "title" "Warning!"}}\n{{$out.Set "description" "You are about to delete **all** notes on that user. Did you perhaps meant to use `note del`?"}}\n{{$out.Set "fields" (cslice\n(sdict "name" "OK. I\'m aware and take responsibility." "value" (printf "Good. Run the following command **within the next %s** to confirm your choice.\\n```%snote delall %d %s```" (humanizeDurationSeconds $DELETE_TIMEOUT) $prefix $target.ID $passwd))\n(sdict "name" "I\'d like to think about it." "value" "That is also OK. Just let it expire.")\n)}}\n{{dbSetExpire .User.ID (printf "notes_delall_%d" $target.ID) $passwd (toInt $DELETE_TIMEOUT.Seconds)}}\n{{else}}\n{{if $passwd := (dbGet .User.ID (printf "notes_delall_%d" $target.ID)).Value}}\n{{if eq (index .CmdArgs 2) $passwd}}\n{{dbDel .User.ID (printf "notes_delall_%d" $target.ID)}}\n{{dbDel $target.ID "notes"}}\n{{$out.Set "title" (printf "Successfully deleted all notes for %s!" $target)}}\n{{$out.Set "description" (printf "I\'ve deleted all notes on this user:\\n%s (ID %d)" $target $target.ID)}}\n{{else}}\n{{$err = "Wrong password. Run the `delall` command again to generate a new one."}}\n{{dbDel .User.ID (printf "notes_delall_%d" $target.ID)}}\n{{end}}\n{{end}}\n{{end}}\n{{else if inFold "nuke" $subcommand}}\n{{if $has_perms = (in (split (index (split (exec "viewperms") "\\n") 2) ", ") $NUKE_PERMISSION)}}\n{{if eq (len .CmdArgs) 1}}\n{{$passwd := ""}}\n{{$len := len $PASSWD_CHARSET}}\n{{range seq 0 12}}\n{{- $passwd = printf "%s%c" $passwd (index $PASSWD_CHARSET (randInt $len)) -}}\n{{end}}\n{{$out.Set "color" 0xffff00}}\n{{$out.Set "title" "Warning!"}}\n{{$out.Set "description" "You are about to delete **all** notes on the server. Are you sure you want to do this? There is no going back."}}\n{{$out.Set "fields" (cslice\n(sdict "name" "OK. I\'m aware and take responsibility." "value" (printf "Good. Run the following command **within the next %s** to confirm your choice.\\n```%snote nuke %s```" (humanizeDurationSeconds $DELETE_TIMEOUT) $prefix $passwd))\n(sdict "name" "I\'d like to think about it." "value" "That is also OK. Just let it expire.")\n)}}\n{{dbSetExpire .User.ID "notes_nuke" $passwd (toInt $DELETE_TIMEOUT.Seconds)}}\n{{else}}\n{{if $passwd := (dbGet .User.ID "notes_nuke").Value}}\n{{if eq (index .CmdArgs 1) $passwd}}\n{{dbDel .User.ID "notes_nuke"}}\n{{$out.Set "title" "Started purging entire system."}}\n{{$out.Set "description" "I will notify you when I\'m done."}}\n{{execCC .CCID nil 10 "exec"}}\n{{end}}\n{{else}}\n{{$err = "Wrong password. Run the `nuke` command again to generate a new one."}}\n{{end}}\n{{end}}\n{{else}}\n{{$err = printf "You silly, twisted boy, you. (Missing permissions)"}}\n{{end}}\n{{else}}\n{{$err = printf "`%s` is not a valid subcommand!\\nValid subcommands are: `%s`.\\nRun `%snotes help` for more information." $subcommand $subcommands_string $prefix}}\n{{end}}\n{{else}}\n{{$err = "Member not found."}}\n{{end}}\n{{end}}\n{{else}}\n{{$err = printf "Just what do you think you\'re doing Dave? (Missing permissions)" }}\n{{end}}{{if $err}}\n{{$err = cembed "description" $err "author" (sdict "name" "An Error Occurred:") "color" 0xff0000\n"footer" (sdict "text" (printf "Triggered by: %s" .User) "icon_url" (.User.AvatarURL "1024"))\n}}\n{{sendMessage nil $err}}\n{{end}}\n{{if and $out (not $err)}}\n{{sendMessage nil (cembed $out)}}\n{{end}}{{else}}\n{{$count := dbCount "notes"}}\n{{if gt $count 0}}\n{{if ge $count 100}}\n{{$dump := dbDelMultiple (sdict "pattern" "notes") 100 0}}\n{{execCC .CCID nil 10 "exec"}}\n{{else}}\n{{$dump := dbDelMultiple (sdict "pattern" "notes") $count 0}}\n{{execCC .CCID nil 10 "exec"}}\n{{end}}\n{{else}}\n{{sendMessage nil (cembed "title" "Successfully purged entire system.")}}\n{{end}}\n{{end}}\n')),(0,o.kt)("h2",{id:"faq"},"FAQ"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},'Q: The command is not saving and it errors with "response too long".')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Answer:")," Make sure to use the code provided in ",(0,o.kt)("inlineCode",{parentName:"p"},"notes_minified.go.tmpl"),". The code provided in the other file is only there to show the command in a readable, formatted manner."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Q: The full reset is taking rather long.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Answer:")," This may have any of the following reasons."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You have accumulated a quite large amount of entries in your server, which obviously will take a while to clear."),(0,o.kt)("li",{parentName:"ol"},"The delay imposed by ",(0,o.kt)("inlineCode",{parentName:"li"},"execCC")," is set to 10 seconds to prevent hitting the limit of 10 executions per minute, per channel."),(0,o.kt)("li",{parentName:"ol"},"The command is always performing one final pass over your database, to ensure the system really is gone.")),(0,o.kt)("h2",{id:"author"},"Author"),(0,o.kt)("p",null,"This custom command was authored by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/l-zeuch"},"@l-zeuch")),(0,o.kt)("h2",{id:"trivia"},"Trivia"),(0,o.kt)("p",null,"This system implements makeshift ",(0,o.kt)("inlineCode",{parentName:"p"},"sdicts")," purely with string manipulation used for storage -- it isn't the most efficient, but was a quite nice exercise back then. This system should serve as a useful thing to server\nstaff as well as an opportunity to learn :^)"))}c.isMDXComponent=!0}}]);