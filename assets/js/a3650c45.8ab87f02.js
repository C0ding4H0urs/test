"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3717],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return m}});var n=t(7294);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),d=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},c=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(t),m=l,g=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return t?n.createElement(g,a(a({ref:r},c),{},{components:t})):n.createElement(g,a({ref:r},c))}));function m(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=u;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var d=2;d<o;d++)a[d]=t[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},131:function(e,r,t){t.r(r),t.d(r,{assets:function(){return s},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return d}});var n=t(3117),l=(t(7294),t(3905));const o={title:"Configure Role Rewards"},a=void 0,i={unversionedId:"leveling/configure-role-rewards",id:"leveling/configure-role-rewards",title:"Configure Role Rewards",description:"This command allows administrators to manage role rewards.",source:"@site/docs/leveling/configure-role-rewards.md",sourceDirName:"leveling",slug:"/leveling/configure-role-rewards",permalink:"/leveling/configure-role-rewards",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/leveling/configure-role-rewards.md",tags:[],version:"current",frontMatter:{title:"Configure Role Rewards"},sidebar:"sidebar",previous:{title:"Overview",permalink:"/leveling/overview"},next:{title:"Configure Settings",permalink:"/leveling/configure-settings"}},s={},d=[{value:"Trigger",id:"trigger",level:2},{value:"Usage",id:"usage",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],c={toc:d};function p(e){let{components:r,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This command allows administrators to manage role rewards."),(0,l.kt)("h2",{id:"trigger"},"Trigger"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type:")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Regex"),(0,l.kt)("br",null),"\n",(0,l.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,l.kt)("inlineCode",{parentName:"p"},"\\A(-|<@!?204255221017214977>\\s*)(role-?rewards|rr)(\\s+|\\z)")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Unless you would like everyone to be able to configure role rewards, we advise that you restrict this command to a staff role in the role restrictions.")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can view a similar help message to the following in Discord by running ",(0,l.kt)("inlineCode",{parentName:"p"},"-rr")," with no arguments.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-rr add <level> <role_name>")," - Adds a role reward to ",(0,l.kt)("inlineCode",{parentName:"li"},"level"),". ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," must be between 1 and 100, and there can be at max 1 role reward per level."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-rr remove <level>")," - Removes the role reward for the level provided, if it exists."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-rr set-type <'stack'|'highest'>")," - Sets the mode in which role rewards are given to users.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"stack")," means that role rewards will ",(0,l.kt)("em",{parentName:"li"},"stack"),", hence the name: users will keep all the role rewards that they are eligible for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"highest")," means that the user will only keep the role reward for the highest level they have attained so far."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-rr reset")," - Resets the role reward settings."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-rr view")," - Views the current role reward setup.")),(0,l.kt)("admonition",{title:"Aliases",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"rr"),", you can also use ",(0,l.kt)("inlineCode",{parentName:"p"},"rolerewards")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"role-rewards"),".")),(0,l.kt)("h2",{id:"code"},"Code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/leveling/role_rewards.go.tmpl",file:"../../../src/leveling/role_rewards.go.tmpl"},'{{/*\n    Manages the role rewards of the server.\n    See <https://yagpdb-cc.github.io/leveling/configure-role-rewards> for more information.\n\n    Author: jo3-l <https://github.com/jo3-l>\n*/}}\n\n{{/* Help message */}}\n{{ $helpMsg := cembed\n    "title" "\ud83c\udfc6 Role Rewards"\n    "description" (joinStr "\\n\\n"\n        "`rolerewards add <level> <role>`: Adds a role reward at the given level"\n        "`rolerewards remove <level>`: Removes the role reward from the given level"\n        "`rolerewards set-type <highest|stack>`: Sets the role reward type. Highest means only the highest role reward less than or equal to the current level, stack is all role rewards up to that level."\n        "`rolerewards reset`: Resets role reward settings."\n        "`rolerewards view`: Views current settings for role rewards."\n    )\n    "color" 14232643\n}}\n{{ if .CmdArgs }}\n    {{ $roleRewards := sdict "type" "stack" }} {{/* The default setup */}}\n    {{ with (dbGet 0 "roleRewards") }}\n        {{ $roleRewards = sdict .Value }} {{/* Update with DB entry if present */}}\n    {{ end }}\n    {{ $cmd := index .CmdArgs 0 }} {{/* The subcommand used for convenience */}}\n\n    {{ if and (eq $cmd "add") (ge (len .CmdArgs) 3) }}\n        {{ $level := index .CmdArgs 1 | toInt }} {{/* The level for this role reward */}}\n        {{ $input := slice .CmdArgs 2 | joinStr " " | lower }} {{/* The role name in lowercase */}}\n\n        {{/* Exact match (irregardless of case) */}}\n        {{ $exactRole := 0 }}\n        {{/* Match from inFold */}}\n        {{ $maybeRole := 0 }}\n        \n        {{ with reFindAllSubmatches `^<@&(\\d{17,19})>|(\\d{17,19})$` $input }}\n            {{ $id := toInt (or (index . 0 1) (index . 0 2)) }}\n            {{ range $.Guild.Roles }}\n                {{- if eq .ID $id }} {{ $exactRole = . }} {{ end -}}\n            {{ end }}\n        {{ else }}\n            {{ range .Guild.Roles }}\n                {{- if eq (lower .Name) (lower $input) }} {{ $exactRole = . }}\n                {{- else if inFold (lower .Name) (lower $input) }} {{ $maybeRole = . }}\n                {{- end -}}\n            {{ end }}\n        {{ end }}\n\n        {{ $role := or $exactRole $maybeRole }}\n        {{/* If there is both level and role */}}\n        {{ if and $level $role }}\n            {{ if and (ge $level 1) (le $level 200) }} {{/* If level is in correct range */}}\n                {{ $roleRewards.Set (str $level) $role.ID }}\n                {{ $s := dbSet 0 "roleRewards" $roleRewards }} {{/* Save settings */}}\n                Successfully set the role `{{ $role.Name }}` to be given at the level `{{ $level }}`.\n            {{ else }}\n                Sorry, the level provided was not in the range 1-200.\n            {{ end }}\n        {{ else }}\n            Sorry, I was unable to find the role you provided / the level provided was invalid.\n        {{ end }}\n\n    {{ else if and (eq $cmd "set-type") (ge (len .CmdArgs) 2) }}\n        {{ $type := index .CmdArgs 1 }}\n        {{ if not (in (cslice "stack" "highest") $type) }} {{/* Check whether type is valid */}}\n            Sorry, that was not a valid type. The type must be either "stack" or "highest".\n        {{ else }}\n            {{ $roleRewards.Set "type" $type }}\n            {{ $s := dbSet 0 "roleRewards" $roleRewards }} {{/* Save settings */}}\n            Successfully set the role-giving type of this server to `{{ $type }}`.\n        {{ end }}\n\n    {{ else if eq $cmd "reset" }}\n        {{ $s := dbSet 0 "roleRewards" (sdict "type" "stack") }} {{/* We set the settings to default */}}\n        Alright, I cleared the role rewards for this server!\n\n    {{ else if and (eq $cmd "remove") (ge (len .CmdArgs) 2) }}\n        {{ with (reFind `\\d+` (index .CmdArgs 1)) }} {{/* Find level to remove */}}\n            {{ if $roleRewards.Get . }}\n                {{ $roleRewards.Del . }}\n                {{ $s := dbSet 0 "roleRewards" $roleRewards }}\n                Successfully removed the role reward from the level `{{ . }}`.\n            {{ else }}\n                Sorry, there is not a role reward set for that level!\n            {{ end }}\n        {{ else }}\n            Please provide a valid level to remove the role reward from.\n        {{ end }}\n\n    {{ else if eq $cmd "view" }}\n        {{ if eq (len $roleRewards) 1 }} {{/* If it is still the default settings */}}\n            {{ sendMessage nil (cembed "title" "Role Rewards" "thumbnail" (sdict "url" "https://i.imgur.com/mJ7zu6k.png") "description" (joinStr "" "**\u276f Role Rewards:** n/a\\n**\u276f Type:** " $roleRewards.type)) }}\n        {{ else }}\n            {{ $out := "" }} {{/* The embed description */}}\n            {{ range $level := seq 1 201 }} {{- /* We can do this as we know level roles are in range 1-100 */}}\n                {{- with ($roleRewards.Get (str $level)) }}\n                    {{- $out = printf "%s\\n\u276f **Level %d:** <@&%d>" $out $level . }}\n                {{- end -}}\n            {{ end }}\n            {{/* Format and send embed */}}\n            {{ sendMessage nil (cembed "title" "Role Rewards" "thumbnail" (sdict "url" "https://i.imgur.com/mJ7zu6k.png") "description" (joinStr "" $out "\\n\\n" "**\u276f Type:** " $roleRewards.type)) }}\n        {{ end }}\n\n    {{ else }}\n        {{ sendMessage nil $helpMsg }}\n    {{ end }}\n{{ else }}\n    {{ sendMessage nil $helpMsg }}\n{{ end }}\n')),(0,l.kt)("h2",{id:"author"},"Author"),(0,l.kt)("p",null,"This custom command was written by ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/jo3-l"},"@jo3-l"),"."))}p.isMDXComponent=!0}}]);